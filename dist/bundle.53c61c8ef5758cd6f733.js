/*! For license information please see bundle.53c61c8ef5758cd6f733.js.LICENSE.txt */
(()=>{var e,t,n={476:function(e,t){!function(e){"use strict";var t=function(){return(t=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function n(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],l=0,i=o.length;l<i;l++,a++)r[a]=o[l];return r}function r(e,n){var r,a,o=(r={current:0,next:function(){return++this.current}},a={},{add:function(e,t){var n=null!=t?t:r.next();return a[n]=e,n},resolve:function(e,t,n){var r=a[e];r&&(n(t)?r.resolve(t):r.reject(t),a[e]=null)}});return n((function(e){if(e.detail&&e.detail.data&&"object"==typeof e.detail.data&&"request_id"in e.detail.data){var t=e.detail.data,n=t.request_id,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["request_id"]);n&&o.resolve(n,r,(function(e){return!("error_type"in e)}))}})),function(n,r){return void 0===r&&(r={}),new Promise((function(a,l){var i=o.add({resolve:a,reject:l},r.request_id);e(n,t(t({},r),{request_id:i}))}))}}var a,o,l,i,s,u="undefined"!=typeof window,c=Boolean(u&&window.AndroidBridge),d=Boolean(u&&window.webkit&&window.webkit.messageHandlers&&window.webkit.messageHandlers.VKWebAppClose),f=Boolean(u&&window.ReactNativeWebView&&"function"==typeof window.ReactNativeWebView.postMessage),p=u&&!c&&!d,m=p&&/(^\?|&)vk_platform=mobile_web(&|$)/.test(location.search),h=p?"message":"VKWebAppEvent",v=n(["VKWebAppInit","VKWebAppGetCommunityAuthToken","VKWebAppAddToCommunity","VKWebAppAddToHomeScreenInfo","VKWebAppClose","VKWebAppCopyText","VKWebAppCreateHash","VKWebAppGetUserInfo","VKWebAppSetLocation","VKWebAppSendToClient","VKWebAppGetClientVersion","VKWebAppGetPhoneNumber","VKWebAppGetEmail","VKWebAppGetGroupInfo","VKWebAppGetGeodata","VKWebAppGetCommunityToken","VKWebAppGetConfig","VKWebAppGetLaunchParams","VKWebAppSetTitle","VKWebAppGetAuthToken","VKWebAppCallAPIMethod","VKWebAppJoinGroup","VKWebAppLeaveGroup","VKWebAppAllowMessagesFromGroup","VKWebAppDenyNotifications","VKWebAppAllowNotifications","VKWebAppOpenPayForm","VKWebAppOpenApp","VKWebAppShare","VKWebAppShowWallPostBox","VKWebAppScroll","VKWebAppShowOrderBox","VKWebAppShowLeaderBoardBox","VKWebAppShowInviteBox","VKWebAppShowRequestBox","VKWebAppAddToFavorites","VKWebAppShowStoryBox","VKWebAppStorageGet","VKWebAppStorageGetKeys","VKWebAppStorageSet","VKWebAppFlashGetInfo","VKWebAppSubscribeStoryApp","VKWebAppOpenWallPost","VKWebAppCheckAllowedScopes","VKWebAppCheckNativeAds","VKWebAppShowNativeAds","VKWebAppRetargetingPixel","VKWebAppConversionHit","VKWebAppShowSubscriptionBox","VKWebAppCheckSurvey","VKWebAppShowSurvey","VKWebAppScrollTop","VKWebAppScrollTopStart","VKWebAppScrollTopStop"],p&&!m?["VKWebAppResizeWindow","VKWebAppAddToMenu","VKWebAppShowInstallPushBox","VKWebAppGetFriends","VKWebAppShowCommunityWidgetPreviewBox"]:["VKWebAppShowImages"]),g=u?window.AndroidBridge:void 0,y=d?window.webkit.messageHandlers:void 0,b=p?parent:void 0;(a=e.EAdsFormats||(e.EAdsFormats={})).REWARD="reward",a.INTERSTITIAL="interstitial",(o=e.EGrantedPermission||(e.EGrantedPermission={})).CAMERA="camera",o.LOCATION="location",o.PHOTO="photo",(l=e.EGetLaunchParamsResponseLanguages||(e.EGetLaunchParamsResponseLanguages={})).RU="ru",l.UK="uk",l.UA="ua",l.EN="en",l.BE="be",l.KZ="kz",l.PT="pt",l.ES="es",(i=e.EGetLaunchParamsResponseGroupRole||(e.EGetLaunchParamsResponseGroupRole={})).ADMIN="admin",i.EDITOR="editor",i.MEMBER="member",i.MODER="moder",i.NONE="none",(s=e.EGetLaunchParamsResponsePlatforms||(e.EGetLaunchParamsResponsePlatforms={})).DESKTOP_WEB="desktop_web",s.MOBILE_WEB="mobile_web",s.MOBILE_ANDROID="mobile_android",s.MOBILE_ANDROID_MESSENGER="mobile_android_messenger",s.MOBILE_IPHONE="mobile_iphone",s.MOBILE_IPHONE_MESSENGER="mobile_iphone_messenger",s.MOBILE_IPAD="mobile_ipad";var w=function(e){var t=void 0,a=[];function o(e){a.push(e)}function l(){return d||c}function i(){return p&&window.parent!==window}function s(){return l()||i()}function u(e){if(d||c)return n(a).map((function(t){return t.call(null,e)}));var r=null==e?void 0:e.data;if(p&&r){if(f&&"string"==typeof r)try{r=JSON.parse(r)}catch(r){}var o=r.type,l=r.data,i=r.frameId;o&&("SetSupportedHandlers"!==o?"VKWebAppSettings"!==o?n(a).map((function(e){return e({detail:{type:o,data:l}})})):t=i:l.supportedHandlers)}}f&&/(android)/i.test(navigator.userAgent)?document.addEventListener(h,u):"undefined"!=typeof window&&"addEventListener"in window&&window.addEventListener(h,u);var m=r((function(e,n){g&&g[e]?g[e](JSON.stringify(n)):y&&y[e]&&"function"==typeof y[e].postMessage?y[e].postMessage(n):f?window.ReactNativeWebView.postMessage(JSON.stringify({handler:e,params:n})):b&&"function"==typeof b.postMessage&&b.postMessage({handler:e,params:n,type:"vk-connect",webFrameId:t,connectVersion:"2.7.2"},"*")}),o);return{send:m,sendPromise:m,subscribe:o,unsubscribe:function(e){var t=a.indexOf(e);-1<t&&a.splice(t,1)},supports:function(e){return c?!(!g||"function"!=typeof g[e]):d?!(!y||!y[e]||"function"!=typeof y[e].postMessage):p&&-1<v.indexOf(e)},isWebView:l,isIframe:i,isEmbedded:s,isStandalone:function(){return!s()}}}();e.applyMiddleware=function e(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return n.includes(void 0)||n.includes(null)?e.apply(void 0,n.filter((function(e){return"function"==typeof e}))):function(e){if(0===n.length)return e;var r,a={subscribe:e.subscribe,send:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.send.apply(e,t)}};return r=n.filter((function(e){return"function"==typeof e})).map((function(e){return e(a)})).reduce((function(e,t){return function(n){return e(t(n))}}))(e.send),t(t({},e),{send:r})}},e.default=w,Object.defineProperty(e,"__esModule",{value:!0})}(t)},786:e=>{const t={DESKTOP:1280,TABLET:1024,SMALL_TABLET:768,MOBILE:320,MOBILE_LANDSCAPE_HEIGHT:415,MEDIUM_HEIGHT:720};function n(e){return`(min-width: ${e}px)`}function r(e){return`(max-width: ${e-.1}px)`}function a(e,t){return`${n(e)} and ${r(t)}`}function o(e){return`(min-height: ${e}px)`}function l(e){return`(max-height: ${e-.1}px)`}const i={DESKTOP_PLUS:n(t.DESKTOP),TABLET:a(t.TABLET,t.DESKTOP),SMALL_TABLET_PLUS:n(t.SMALL_TABLET),SMALL_TABLET:a(t.SMALL_TABLET,t.TABLET),MOBILE:a(t.MOBILE,t.SMALL_TABLET),MEDIUM_HEIGHT:o(t.MEDIUM_HEIGHT),MOBILE_LANDSCAPE_HEIGHT:o(t.MOBILE_LANDSCAPE_HEIGHT)};e.exports={BREAKPOINTS:t,MEDIA_QUERIES:i,widthHalfInterval:a,widthPlus:n,widthMinus:r,heightHalfInterval:function(e,t){return`${o(e)} and ${l(t)}`},heightPlus:o,heightMinus:l}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var o,l,i=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var u in o=Object(arguments[s]))n.call(o,u)&&(i[u]=o[u]);if(t){l=t(o);for(var c=0;c<l.length;c++)r.call(o,l[c])&&(i[l[c]]=o[l[c]])}}return i}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(418),o=n(840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(l(227));var i=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)i.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function v(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(h,e)||!p.call(m,e)&&(f.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,C=60107,_=60108,x=60114,T=60109,P=60110,M=60112,N=60113,O=60120,A=60115,L=60116,R=60121,I=60128,z=60129,D=60130,V=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;k=B("react.element"),S=B("react.portal"),C=B("react.fragment"),_=B("react.strict_mode"),x=B("react.profiler"),T=B("react.provider"),P=B("react.context"),M=B("react.forward_ref"),N=B("react.suspense"),O=B("react.suspense_list"),A=B("react.memo"),L=B("react.lazy"),R=B("react.block"),B("react.scope"),I=B("react.opaque.id"),z=B("react.debug_trace_mode"),D=B("react.offscreen"),V=B("react.legacy_hidden")}var j,W="function"==typeof Symbol&&Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function H(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var U=!1;function K(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i])return"\n"+a[l].replace(" at new "," at ")}while(1<=l&&0<=i);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function G(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return K(e.type,!1);case 11:return K(e.type.render,!1);case 22:return K(e.type._render,!1);case 1:return K(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case S:return"Portal";case x:return"Profiler";case _:return"StrictMode";case N:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return Y(e.type);case R:return Y(e._render);case L:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function X(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=X(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=X(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,X(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function le(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+X(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:X(n)}}function ue(e,t){var n=X(t.value),r=X(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ve=(he=function(e,t){if(e.namespaceURI!==de.svg||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Te=null,Pe=null;function Me(e){if(e=ta(e)){if("function"!=typeof xe)throw Error(l(280));var t=e.stateNode;t&&(t=ra(t),xe(e.stateNode,e.type,t))}}function Ne(e){Te?Pe?Pe.push(e):Pe=[e]:Te=e}function Oe(){if(Te){var e=Te,t=Pe;if(Pe=Te=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Ae(e,t){return e(t)}function Le(e,t,n,r,a){return e(t,n,r,a)}function Re(){}var Ie=Ae,ze=!1,De=!1;function Ve(){null===Te&&null===Pe||(Re(),Oe())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=ra(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var je=!1;if(d)try{var We={};Object.defineProperty(We,"passive",{get:function(){je=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(he){je=!1}function Fe(e,t,n,r,a,o,l,i,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var He=!1,Ue=null,Ke=!1,Ge=null,Ye={onError:function(e){He=!0,Ue=e}};function Xe(e,t,n,r,a,o,l,i,s){He=!1,Ue=null,Fe.apply(Ye,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Je(e){if(Qe(e)!==e)throw Error(l(188))}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var $e,et,tt,nt,rt=!1,at=[],ot=null,lt=null,it=null,st=new Map,ut=new Map,ct=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":it=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function mt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=ft(t,n,r,a,o),null!==t&&null!==(t=ta(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function ht(e){var t=ea(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ta(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){vt(e)&&n.delete(t)}function yt(){for(rt=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=ta(e.blockedOn))&&$e(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ot&&vt(ot)&&(ot=null),null!==lt&&vt(lt)&&(lt=null),null!==it&&vt(it)&&(it=null),st.forEach(gt),ut.forEach(gt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function wt(e){function t(t){return bt(t,e)}if(0<at.length){bt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==lt&&bt(lt,e),null!==it&&bt(it,e),st.forEach(t),ut.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)ht(n),null===n.blockedOn&&ct.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},St={},Ct={};function _t(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return St[e]=n[t];return e}d&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var xt=_t("animationend"),Tt=_t("animationiteration"),Pt=_t("animationstart"),Mt=_t("transitionend"),Nt=new Map,Ot=new Map,At=["abort","abort",xt,"animationEnd",Tt,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Ot.set(r,t),Nt.set(r,a),u(a,[r])}}(0,o.unstable_now)();var Rt=8;function It(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!=(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!=(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!=(t=4186112&e)?(Rt=6,t):0!=(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!=(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,a=0,o=e.expiredLanes,l=e.suspendedLanes,i=e.pingedLanes;if(0!==o)r=o,a=Rt=15;else if(0!=(o=134217727&n)){var s=o&~l;0!==s?(r=It(s),a=Rt):0!=(i&=o)&&(r=It(i),a=Rt)}else 0!=(o=n&~l)?(r=It(o),a=Rt):0!==i&&(r=It(i),a=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Ft(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&l)){if(It(t),a<=Rt)return t;Rt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Ft(t)),r|=e[n],t&=~a;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Vt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Vt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Vt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(l(358,e))}function Bt(e){return e&-e}function jt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ft(t)]=n}var Ft=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/Ut|0)|0},Ht=Math.log,Ut=Math.LN2,Kt=o.unstable_UserBlockingPriority,Gt=o.unstable_runWithPriority,Yt=!0;function Xt(e,t,n,r){ze||Re();var a=qt,o=ze;ze=!0;try{Le(a,e,t,n,r)}finally{(ze=o)||Ve()}}function Qt(e,t,n,r){Gt(Kt,qt.bind(null,e,t,n,r))}function qt(e,t,n,r){var a;if(Yt)if((a=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=ft(null,e,t,n,r),at.push(e);else{var o=Jt(e,t,n,r);if(null===o)a&&pt(e,r);else{if(a){if(-1<dt.indexOf(e))return e=ft(o,e,t,n,r),void at.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return ot=mt(ot,e,t,n,r,a),!0;case"dragenter":return lt=mt(lt,e,t,n,r,a),!0;case"mouseover":return it=mt(it,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return st.set(o,mt(st.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ut.set(o,mt(ut.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Lr(e,t,r,null,n)}}}function Jt(e,t,n,r){var a=_e(r);if(null!==(a=ea(a))){var o=Qe(a);if(null===o)a=null;else{var l=o.tag;if(13===l){if(null!==(a=qe(o)))return a;a=null}else if(3===l){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Lr(e,t,r,a,n),null}var Zt=null,$t=null,en=null;function tn(){if(en)return en;var e,t,n=$t,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return en=a.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function an(){return!1}function on(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rn:an,this.isPropagationStopped=an,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,sn,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=on(cn),fn=a({},cn,{view:0,detail:0}),pn=on(fn),mn=a({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,sn=e.screenY-un.screenY):sn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(mn),vn=on(a({},mn,{dataTransfer:0})),gn=on(a({},fn,{relatedTarget:0})),yn=on(a({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=a({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),wn=on(bn),En=on(a({},cn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function xn(){return _n}var Tn=a({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=on(Tn),Mn=on(a({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=on(a({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),On=on(a({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=a({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(An),Rn=[9,13,27,32],In=d&&"CompositionEvent"in window,zn=null;d&&"documentMode"in document&&(zn=document.documentMode);var Dn=d&&"TextEvent"in window&&!zn,Vn=d&&(!In||zn&&8<zn&&11>=zn),Bn=String.fromCharCode(32),jn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Gn(e,t,n,r){Ne(r),0<(t=Ir(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Xn=null;function Qn(e){Tr(e,0)}function qn(e){if(J(na(e)))return e}function Jn(e,t){if("change"===e)return t}var Zn=!1;if(d){var $n;if(d){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}$n=er}else $n=!1;Zn=$n&&(!document.documentMode||9<document.documentMode)}function nr(){Yn&&(Yn.detachEvent("onpropertychange",rr),Xn=Yn=null)}function rr(e){if("value"===e.propertyName&&qn(Xn)){var t=[];if(Gn(t,Xn,e,_e(e)),e=Qn,ze)e(t);else{ze=!0;try{Ae(e,t)}finally{ze=!1,Ve()}}}}function ar(e,t,n){"focusin"===e?(nr(),Xn=n,(Yn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Xn)}function lr(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function cr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,br=null,wr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wr||null==gr||gr!==Z(r)||(r="selectionStart"in(r=gr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&cr(br,r)||(br=r,0<(r=Ir(yr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(At,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)Ot.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_r=new Set("cancel close invalid load scroll toggle".split(" ").concat(Cr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,i,s,u){if(Xe.apply(this,arguments),He){if(!He)throw Error(l(198));var c=Ue;He=!1,Ue=null,Ke||(Ke=!0,Ge=c)}}(r,t,void 0,e),e.currentTarget=null}function Tr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],s=i.instance,u=i.currentTarget;if(i=i.listener,s!==o&&a.isPropagationStopped())break e;xr(a,i,u),o=s}else for(l=0;l<r.length;l++){if(s=(i=r[l]).instance,u=i.currentTarget,i=i.listener,s!==o&&a.isPropagationStopped())break e;xr(a,i,u),o=s}}}if(Ke)throw e=Ge,Ke=!1,Ge=null,e}function Pr(e,t){var n=aa(t),r=e+"__bubble";n.has(r)||(Ar(t,e,2,!1),n.add(r))}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Mr]||(e[Mr]=!0,i.forEach((function(t){_r.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&_r.has(e)){if("scroll"!==e)return;a|=2,o=r}var l=aa(o),i=e+"__"+(t?"capture":"bubble");l.has(i)||(t&&(a|=4),Ar(o,e,a,t),l.add(i))}function Ar(e,t,n,r){var a=Ot.get(t);switch(void 0===a?2:a){case 0:a=Xt;break;case 1:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Lr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&((s=l.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ea(i)))return;if(5===(s=l.tag)||6===s){r=o=l;continue e}i=i.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{return Ie(e,t,n)}finally{De=!1,Ve()}}((function(){var r=o,a=_e(n),l=[];e:{var i=Nt.get(e);if(void 0!==i){var s=dn,u=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":s=Pn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Nn;break;case xt:case Tt:case Pt:s=yn;break;case Mt:s=On;break;case"scroll":s=pn;break;case"wheel":s=Ln;break;case"copy":case"cut":case"paste":s=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Mn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==i?i+"Capture":null:i;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=Be(m,f))&&c.push(Rr(m,h,p))),d)break;m=m.return}0<c.length&&(i=new s(i,u,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!ea(u)&&!u[Zr])&&(s||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ea(u):null)&&(u!==(d=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Mn,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==s?i:na(s),p=null==u?i:na(u),(i=new c(h,m+"leave",s,n,a)).target=d,i.relatedTarget=p,h=null,ea(a)===r&&((c=new c(f,m+"enter",u,n,a)).target=p,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(f=u,m=0,p=c=s;p;p=zr(p))m++;for(p=0,h=f;h;h=zr(h))p++;for(;0<m-p;)c=zr(c),m--;for(;0<p-m;)f=zr(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=zr(c),f=zr(f)}c=null}else c=null;null!==s&&Dr(l,i,s,c,!1),null!==u&&null!==d&&Dr(l,d,u,c,!0)}if("select"===(s=(i=r?na(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var v=Jn;else if(Kn(i))if(Zn)v=ir;else{v=or;var g=ar}else(s=i.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=lr);switch(v&&(v=v(e,r))?Gn(l,v,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ae(i,"number",i.value)),g=r?na(r):window,e){case"focusin":(Kn(g)||"true"===g.contentEditable)&&(gr=g,yr=r,br=null);break;case"focusout":br=yr=gr=null;break;case"mousedown":wr=!0;break;case"contextmenu":case"mouseup":case"dragend":wr=!1,Er(l,n,a);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":Er(l,n,a)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?Wn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Vn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(y=tn()):($t="value"in(Zt=a)?Zt.value:Zt.textContent,Hn=!0)),0<(g=Ir(r,b)).length&&(b=new En(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=Fn(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(jn=!0,Bn);case"textInput":return(e=t.data)===Bn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!In&&Wn(e,t)?(e=tn(),en=$t=Zt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Tr(l,t)}))}function Rr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Be(e,n))&&r.unshift(Rr(e,o,a)),null!=(o=Be(e,t))&&r.push(Rr(e,o,a))),e=e.return}return r}function zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,s=i.alternate,u=i.stateNode;if(null!==s&&s===r)break;5===i.tag&&null!==u&&(i=u,a?null!=(s=Be(n,o))&&l.unshift(Rr(n,s,i)):a||null!=(s=Be(n,o))&&l.push(Rr(n,s,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}function Vr(){}var Br=null,jr=null;function Wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Kr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Gr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Yr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Xr=0,Qr=Math.random().toString(36).slice(2),qr="__reactFiber$"+Qr,Jr="__reactProps$"+Qr,Zr="__reactContainer$"+Qr,$r="__reactEvents$"+Qr;function ea(e){var t=e[qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Zr]||n[qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Yr(e);null!==e;){if(n=e[qr])return n;e=Yr(e)}return t}n=(e=n).parentNode}return null}function ta(e){return!(e=e[qr]||e[Zr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function na(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ra(e){return e[Jr]||null}function aa(e){var t=e[$r];return void 0===t&&(t=e[$r]=new Set),t}var oa=[],la=-1;function ia(e){return{current:e}}function sa(e){0>la||(e.current=oa[la],oa[la]=null,la--)}function ua(e,t){la++,oa[la]=e.current,e.current=t}var ca={},da=ia(ca),fa=ia(!1),pa=ca;function ma(e,t){var n=e.type.contextTypes;if(!n)return ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function ha(e){return null!=e.childContextTypes}function va(){sa(fa),sa(da)}function ga(e,t,n){if(da.current!==ca)throw Error(l(168));ua(da,t),ua(fa,n)}function ya(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(l(108,Y(t)||"Unknown",o));return a({},n,r)}function ba(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ca,pa=da.current,ua(da,e),ua(fa,fa.current),!0}function wa(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=ya(e,t,pa),r.__reactInternalMemoizedMergedChildContext=e,sa(fa),sa(da),ua(da,e)):sa(fa),ua(fa,n)}var Ea=null,ka=null,Sa=o.unstable_runWithPriority,Ca=o.unstable_scheduleCallback,_a=o.unstable_cancelCallback,xa=o.unstable_shouldYield,Ta=o.unstable_requestPaint,Pa=o.unstable_now,Ma=o.unstable_getCurrentPriorityLevel,Na=o.unstable_ImmediatePriority,Oa=o.unstable_UserBlockingPriority,Aa=o.unstable_NormalPriority,La=o.unstable_LowPriority,Ra=o.unstable_IdlePriority,Ia={},za=void 0!==Ta?Ta:function(){},Da=null,Va=null,Ba=!1,ja=Pa(),Wa=1e4>ja?Pa:function(){return Pa()-ja};function Fa(){switch(Ma()){case Na:return 99;case Oa:return 98;case Aa:return 97;case La:return 96;case Ra:return 95;default:throw Error(l(332))}}function Ha(e){switch(e){case 99:return Na;case 98:return Oa;case 97:return Aa;case 96:return La;case 95:return Ra;default:throw Error(l(332))}}function Ua(e,t){return e=Ha(e),Sa(e,t)}function Ka(e,t,n){return e=Ha(e),Ca(e,t,n)}function Ga(){if(null!==Va){var e=Va;Va=null,_a(e)}Ya()}function Ya(){if(!Ba&&null!==Da){Ba=!0;var e=0;try{var t=Da;Ua(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Da=null}catch(t){throw null!==Da&&(Da=Da.slice(e+1)),Ca(Na,Ga),t}finally{Ba=!1}}}var Xa=E.ReactCurrentBatchConfig;function Qa(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var qa=ia(null),Ja=null,Za=null,$a=null;function eo(){$a=Za=Ja=null}function to(e){var t=qa.current;sa(qa),e.type._context._currentValue=t}function no(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ro(e,t){Ja=e,$a=Za=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Il=!0),e.firstContext=null)}function ao(e,t){if($a!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||($a=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Za){if(null===Ja)throw Error(l(308));Za=t,Ja.dependencies={lanes:0,firstContext:t,responders:null}}else Za=Za.next=t;return e._currentValue}var oo=!1;function lo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function so(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fo(e,t,n,r){var o=e.updateQueue;oo=!1;var l=o.firstBaseUpdate,i=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var u=s,c=u.next;u.next=null,null===i?l=c:i.next=c,i=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==i&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==l){for(f=o.baseState,i=0,d=c=u=null;;){s=l.lane;var p=l.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(s=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,s);break e}f=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(s="function"==typeof(m=h.payload)?m.call(p,f,s):m))break e;f=a({},f,s);break e;case 2:oo=!0}}null!==l.callback&&(e.flags|=32,null===(s=o.effects)?o.effects=[l]:s.push(l))}else p={eventTime:p,lane:s,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===d?(c=d=p,u=f):d=d.next=p,i|=s;if(null===(l=l.next)){if(null===(s=o.shared.pending))break;l=s.next,s.next=null,o.lastBaseUpdate=s,o.shared.pending=null}}null===d&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=d,Vi|=i,e.lanes=i,e.memoizedState=f}}function po(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var mo=(new r.Component).refs;function ho(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=us(),a=cs(e),o=so(r,a);o.payload=t,null!=n&&(o.callback=n),uo(e,o),ds(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=us(),a=cs(e),o=so(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),uo(e,o),ds(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=us(),r=cs(e),a=so(n,r);a.tag=2,null!=t&&(a.callback=t),uo(e,a),ds(e,r,n)}};function go(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(a,o))}function yo(e,t,n){var r=!1,a=ca,o=t.contextType;return"object"==typeof o&&null!==o?o=ao(o):(a=ha(t)?pa:da.current,o=(r=null!=(r=t.contextTypes))?ma(e,a):ca),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mo,lo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=ao(o):(o=ha(t)?pa:da.current,a.context=ma(e,o)),fo(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ho(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&vo.enqueueReplaceState(a,a.state,null),fo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var Eo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;t===mo&&(t=r.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function So(e,t){if("textarea"!==e.type)throw Error(l(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Co(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ws(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function i(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ks(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Fs(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Hs(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ks(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Fs(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case S:return(t=Gs(t,e.mode,n)).return=e,t}if(Eo(t)||F(t))return(t=Hs(t,e.mode,n,null)).return=e,t;So(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?n.type===C?d(e,t,n.props.children,r,a):u(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null}if(Eo(n)||F(n))return null!==a?null:d(e,t,n,r,null);So(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===C?d(t,e,r.props.children,a,r.key):u(t,e,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Eo(r)||F(r))return d(t,e=e.get(n)||null,r,a,null);So(t,r)}return null}function h(a,l,i,s){for(var u=null,c=null,d=l,h=l=0,v=null;null!==d&&h<i.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=p(a,d,i[h],s);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(a,d),l=o(g,l,h),null===c?u=g:c.sibling=g,c=g,d=v}if(h===i.length)return n(a,d),u;if(null===d){for(;h<i.length;h++)null!==(d=f(a,i[h],s))&&(l=o(d,l,h),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(a,d);h<i.length;h++)null!==(v=m(d,a,h,i[h],s))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),l=o(v,l,h),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(a,e)})),u}function v(a,i,s,u){var c=F(s);if("function"!=typeof c)throw Error(l(150));if(null==(s=c.call(s)))throw Error(l(151));for(var d=c=null,h=i,v=i=0,g=null,y=s.next();null!==h&&!y.done;v++,y=s.next()){h.index>v?(g=h,h=null):g=h.sibling;var b=p(a,h,y.value,u);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(a,h),i=o(b,i,v),null===d?c=b:d.sibling=b,d=b,h=g}if(y.done)return n(a,h),c;if(null===h){for(;!y.done;v++,y=s.next())null!==(y=f(a,y.value,u))&&(i=o(y,i,v),null===d?c=y:d.sibling=y,d=y);return c}for(h=r(a,h);!y.done;v++,y=s.next())null!==(y=m(h,a,v,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?v:y.key),i=o(y,i,v),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),c}return function(e,r,o,s){var u="object"==typeof o&&null!==o&&o.type===C&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case k:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(o.type===C){n(e,u.sibling),(r=a(u,o.props.children)).return=e,e=r;break e}}else if(u.elementType===o.type){n(e,u.sibling),(r=a(u,o.props)).ref=ko(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===C?((r=Hs(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=Fs(o.type,o.key,o.props,null,e.mode,s)).ref=ko(e,r,o),s.return=e,e=s)}return i(e);case S:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gs(o,e.mode,s)).return=e,e=r}return i(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Ks(o,e.mode,s)).return=e,e=r),i(e);if(Eo(o))return h(e,r,o,s);if(F(o))return v(e,r,o,s);if(c&&So(e,o),void 0===o&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(l(152,Y(e.type)||"Component"))}return n(e,r)}}var _o=Co(!0),xo=Co(!1),To={},Po=ia(To),Mo=ia(To),No=ia(To);function Oo(e){if(e===To)throw Error(l(174));return e}function Ao(e,t){switch(ua(No,t),ua(Mo,e),ua(Po,To),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}sa(Po),ua(Po,t)}function Lo(){sa(Po),sa(Mo),sa(No)}function Ro(e){Oo(No.current);var t=Oo(Po.current),n=pe(t,e.type);t!==n&&(ua(Mo,e),ua(Po,n))}function Io(e){Mo.current===e&&(sa(Po),sa(Mo))}var zo=ia(0);function Do(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Vo=null,Bo=null,jo=!1;function Wo(e,t){var n=Bs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ho(e){if(jo){var t=Bo;if(t){var n=t;if(!Fo(e,t)){if(!(t=Gr(n.nextSibling))||!Fo(e,t))return e.flags=-1025&e.flags|2,jo=!1,void(Vo=e);Wo(Vo,n)}Vo=e,Bo=Gr(t.firstChild)}else e.flags=-1025&e.flags|2,jo=!1,Vo=e}}function Uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Vo=e}function Ko(e){if(e!==Vo)return!1;if(!jo)return Uo(e),jo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=Bo;t;)Wo(e,t),t=Gr(t.nextSibling);if(Uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Bo=Gr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Bo=null}}else Bo=Vo?Gr(e.stateNode.nextSibling):null;return!0}function Go(){Bo=Vo=null,jo=!1}var Yo=[];function Xo(){for(var e=0;e<Yo.length;e++)Yo[e]._workInProgressVersionPrimary=null;Yo.length=0}var Qo=E.ReactCurrentDispatcher,qo=E.ReactCurrentBatchConfig,Jo=0,Zo=null,$o=null,el=null,tl=!1,nl=!1;function rl(){throw Error(l(321))}function al(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ol(e,t,n,r,a,o){if(Jo=o,Zo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qo.current=null===e||null===e.memoizedState?Ol:Al,e=n(r,a),nl){o=0;do{if(nl=!1,!(25>o))throw Error(l(301));o+=1,el=$o=null,t.updateQueue=null,Qo.current=Ll,e=n(r,a)}while(nl)}if(Qo.current=Nl,t=null!==$o&&null!==$o.next,Jo=0,el=$o=Zo=null,tl=!1,t)throw Error(l(300));return e}function ll(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===el?Zo.memoizedState=el=e:el=el.next=e,el}function il(){if(null===$o){var e=Zo.alternate;e=null!==e?e.memoizedState:null}else e=$o.next;var t=null===el?Zo.memoizedState:el.next;if(null!==t)el=t,$o=e;else{if(null===e)throw Error(l(310));e={memoizedState:($o=e).memoizedState,baseState:$o.baseState,baseQueue:$o.baseQueue,queue:$o.queue,next:null},null===el?Zo.memoizedState=el=e:el=el.next=e}return el}function sl(e,t){return"function"==typeof t?t(e):t}function ul(e){var t=il(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=$o,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var s=i=o=null,u=a;do{var c=u.lane;if((Jo&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(i=s=d,o=r):s=s.next=d,Zo.lanes|=c,Vi|=c}u=u.next}while(null!==u&&u!==a);null===s?o=r:s.next=i,sr(r,t.memoizedState)||(Il=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function cl(e){var t=il(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);sr(o,t.memoizedState)||(Il=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function dl(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Jo&e)===e)&&(t._workInProgressVersionPrimary=r,Yo.push(t))),e)return n(t._source);throw Yo.push(t),Error(l(350))}function fl(e,t,n,r){var a=Ni;if(null===a)throw Error(l(349));var o=t._getVersion,i=o(t._source),s=Qo.current,u=s.useState((function(){return dl(a,t,n)})),c=u[1],d=u[0];u=el;var f=e.memoizedState,p=f.refs,m=p.getSnapshot,h=f.source;f=f.subscribe;var v=Zo;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!sr(i,e)){e=n(t._source),sr(d,e)||(c(e),e=cs(v),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,l=e;0<l;){var s=31-Ft(l),u=1<<s;r[s]|=e,l&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cs(v);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(m,n)&&sr(h,t)&&sr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:sl,lastRenderedState:d}).dispatch=c=Ml.bind(null,Zo,e),u.queue=e,u.baseQueue=null,d=dl(a,t,n),u.memoizedState=u.baseState=d),d}function pl(e,t,n){return fl(il(),e,t,n)}function ml(e){var t=ll();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:sl,lastRenderedState:e}).dispatch=Ml.bind(null,Zo,e),[t.memoizedState,e]}function hl(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Zo.updateQueue)?(t={lastEffect:null},Zo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vl(e){return e={current:e},ll().memoizedState=e}function gl(){return il().memoizedState}function yl(e,t,n,r){var a=ll();Zo.flags|=e,a.memoizedState=hl(1|t,n,void 0,void 0===r?null:r)}function bl(e,t,n,r){var a=il();r=void 0===r?null:r;var o=void 0;if(null!==$o){var l=$o.memoizedState;if(o=l.destroy,null!==r&&al(r,l.deps))return void hl(t,n,o,r)}Zo.flags|=e,a.memoizedState=hl(1|t,n,o,r)}function wl(e,t){return yl(516,4,e,t)}function El(e,t){return bl(516,4,e,t)}function kl(e,t){return bl(4,2,e,t)}function Sl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Cl(e,t,n){return n=null!=n?n.concat([e]):null,bl(4,2,Sl.bind(null,t,e),n)}function _l(){}function xl(e,t){var n=il();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&al(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Tl(e,t){var n=il();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&al(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pl(e,t){var n=Fa();Ua(98>n?98:n,(function(){e(!0)})),Ua(97<n?97:n,(function(){var n=qo.transition;qo.transition=1;try{e(!1),t()}finally{qo.transition=n}}))}function Ml(e,t,n){var r=us(),a=cs(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},l=t.pending;if(null===l?o.next=o:(o.next=l.next,l.next=o),t.pending=o,l=e.alternate,e===Zo||null!==l&&l===Zo)nl=tl=!0;else{if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=l(i,n);if(o.eagerReducer=l,o.eagerState=s,sr(s,i))return}catch(e){}ds(e,a,r)}}var Nl={readContext:ao,useCallback:rl,useContext:rl,useEffect:rl,useImperativeHandle:rl,useLayoutEffect:rl,useMemo:rl,useReducer:rl,useRef:rl,useState:rl,useDebugValue:rl,useDeferredValue:rl,useTransition:rl,useMutableSource:rl,useOpaqueIdentifier:rl,unstable_isNewReconciler:!1},Ol={readContext:ao,useCallback:function(e,t){return ll().memoizedState=[e,void 0===t?null:t],e},useContext:ao,useEffect:wl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,yl(4,2,Sl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return yl(4,2,e,t)},useMemo:function(e,t){var n=ll();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ll();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ml.bind(null,Zo,e),[r.memoizedState,e]},useRef:vl,useState:ml,useDebugValue:_l,useDeferredValue:function(e){var t=ml(e),n=t[0],r=t[1];return wl((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=ml(!1),t=e[0];return vl(e=Pl.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ll();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fl(r,e,t,n)},useOpaqueIdentifier:function(){if(jo){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Xr++).toString(36))),Error(l(355))})),n=ml(t)[1];return 0==(2&Zo.mode)&&(Zo.flags|=516,hl(5,(function(){n("r:"+(Xr++).toString(36))}),void 0,null)),t}return ml(t="r:"+(Xr++).toString(36)),t},unstable_isNewReconciler:!1},Al={readContext:ao,useCallback:xl,useContext:ao,useEffect:El,useImperativeHandle:Cl,useLayoutEffect:kl,useMemo:Tl,useReducer:ul,useRef:gl,useState:function(){return ul(sl)},useDebugValue:_l,useDeferredValue:function(e){var t=ul(sl),n=t[0],r=t[1];return El((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=ul(sl)[0];return[gl().current,e]},useMutableSource:pl,useOpaqueIdentifier:function(){return ul(sl)[0]},unstable_isNewReconciler:!1},Ll={readContext:ao,useCallback:xl,useContext:ao,useEffect:El,useImperativeHandle:Cl,useLayoutEffect:kl,useMemo:Tl,useReducer:cl,useRef:gl,useState:function(){return cl(sl)},useDebugValue:_l,useDeferredValue:function(e){var t=cl(sl),n=t[0],r=t[1];return El((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=cl(sl)[0];return[gl().current,e]},useMutableSource:pl,useOpaqueIdentifier:function(){return cl(sl)[0]},unstable_isNewReconciler:!1},Rl=E.ReactCurrentOwner,Il=!1;function zl(e,t,n,r){t.child=null===e?xo(t,null,n,r):_o(t,e.child,n,r)}function Dl(e,t,n,r,a){n=n.render;var o=t.ref;return ro(t,a),r=ol(e,t,n,r,o,a),null===e||Il?(t.flags|=1,zl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ni(e,t,a))}function Vl(e,t,n,r,a,o){if(null===e){var l=n.type;return"function"!=typeof l||js(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fs(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Bl(e,t,l,r,a,o))}return l=e.child,0==(a&o)&&(a=l.memoizedProps,(n=null!==(n=n.compare)?n:cr)(a,r)&&e.ref===t.ref)?ni(e,t,o):(t.flags|=1,(e=Ws(l,r)).ref=t.ref,e.return=t,t.child=e)}function Bl(e,t,n,r,a,o){if(null!==e&&cr(e.memoizedProps,r)&&e.ref===t.ref){if(Il=!1,0==(o&a))return t.lanes=e.lanes,ni(e,t,o);0!=(16384&e.flags)&&(Il=!0)}return Fl(e,t,n,r,o)}function jl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gs(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gs(0,e),null;t.memoizedState={baseLanes:0},gs(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,gs(0,r);return zl(e,t,a,n),t.child}function Wl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fl(e,t,n,r,a){var o=ha(n)?pa:da.current;return o=ma(t,o),ro(t,a),n=ol(e,t,n,r,o,a),null===e||Il?(t.flags|=1,zl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ni(e,t,a))}function Hl(e,t,n,r,a){if(ha(n)){var o=!0;ba(t)}else o=!1;if(ro(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yo(t,n,r),wo(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var s=l.context,u=n.contextType;u="object"==typeof u&&null!==u?ao(u):ma(t,u=ha(n)?pa:da.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||s!==u)&&bo(t,l,r,u),oo=!1;var f=t.memoizedState;l.state=f,fo(t,r,l,a),s=t.memoizedState,i!==r||f!==s||fa.current||oo?("function"==typeof c&&(ho(t,n,c,r),s=t.memoizedState),(i=oo||go(t,n,i,r,f,s,u))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4)):("function"==typeof l.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=u,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4),r=!1)}else{l=t.stateNode,io(e,t),i=t.memoizedProps,u=t.type===t.elementType?i:Qa(t.type,i),l.props=u,d=t.pendingProps,f=l.context,s="object"==typeof(s=n.contextType)&&null!==s?ao(s):ma(t,s=ha(n)?pa:da.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==d||f!==s)&&bo(t,l,r,s),oo=!1,f=t.memoizedState,l.state=f,fo(t,r,l,a);var m=t.memoizedState;i!==d||f!==m||fa.current||oo?("function"==typeof p&&(ho(t,n,p,r),m=t.memoizedState),(u=oo||go(t,n,u,r,f,m,s))?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,m,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),l.props=r,l.state=m,l.context=s,r=u):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Ul(e,t,n,r,o,a)}function Ul(e,t,n,r,a,o){Wl(e,t);var l=0!=(64&t.flags);if(!r&&!l)return a&&wa(t,n,!1),ni(e,t,o);r=t.stateNode,Rl.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=_o(t,e.child,null,o),t.child=_o(t,null,i,o)):zl(e,t,i,o),t.memoizedState=r.state,a&&wa(t,n,!0),t.child}function Kl(e){var t=e.stateNode;t.pendingContext?ga(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ga(0,t.context,!1),Ao(e,t.containerInfo)}var Gl,Yl,Xl,Ql,ql={dehydrated:null,retryLane:0};function Jl(e,t,n){var r,a=t.pendingProps,o=zo.current,l=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(l=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ua(zo,1&o),null===e?(void 0!==a.fallback&&Ho(t),e=a.children,o=a.fallback,l?(e=Zl(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ql,e):"number"==typeof a.unstable_expectedLoadTime?(e=Zl(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ql,t.lanes=33554432,e):((n=Us({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,l?(a=function(e,t,n,r,a){var o=t.mode,l=e.child;e=l.sibling;var i={mode:"hidden",children:n};return 0==(2&o)&&t.child!==l?((n=t.child).childLanes=0,n.pendingProps=i,null!==(l=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=l,l.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ws(l,i),null!==e?r=Ws(e,r):(r=Hs(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},l.childLanes=e.childLanes&~n,t.memoizedState=ql,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Ws(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Zl(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Us(t,a,0,null),n=Hs(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function $l(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),no(e.return,t)}function ei(e,t,n,r,a,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a,l.lastEffect=o)}function ti(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(zl(e,t,r.children,n),0!=(2&(r=zo.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$l(e,n);else if(19===e.tag)$l(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ua(zo,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Do(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ei(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Do(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ei(t,!0,n,null,o,t.lastEffect);break;case"together":ei(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ni(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Vi|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Ws(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ws(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ri(e,t){if(!jo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ai(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return ha(t.type)&&va(),null;case 3:return Lo(),sa(fa),sa(da),Xo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ko(t)?t.flags|=4:r.hydrate||(t.flags|=256)),Yl(t),null;case 5:Io(t);var o=Oo(No.current);if(n=t.type,null!==e&&null!=t.stateNode)Xl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(l(166));return null}if(e=Oo(Po.current),Ko(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[qr]=t,r[Jr]=i,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Cr.length;e++)Pr(Cr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,i),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Pr("invalid",r);break;case"textarea":se(r,i),Pr("invalid",r)}for(var u in Se(n,i),e=null,i)i.hasOwnProperty(u)&&(o=i[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):s.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Pr("scroll",r));switch(n){case"input":q(r),re(r,i,!0);break;case"textarea":q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Vr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===de.html&&(e=fe(n)),e===de.html?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[qr]=t,e[Jr]=r,Gl(e,t,!1,!1),t.stateNode=e,u=Ce(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),o=r;break;case"iframe":case"object":case"embed":Pr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Cr.length;o++)Pr(Cr[o],e);o=r;break;case"source":Pr("error",e),o=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),o=r;break;case"details":Pr("toggle",e),o=r;break;case"input":ee(e,r),o=$(e,r),Pr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":se(e,r),o=ie(e,r),Pr("invalid",e);break;default:o=r}Se(n,o);var c=o;for(i in c)if(c.hasOwnProperty(i)){var d=c[i];"style"===i?Ee(e,d):"dangerouslySetInnerHTML"===i?null!=(d=d?d.__html:void 0)&&ve(e,d):"children"===i?"string"==typeof d?("textarea"!==n||""!==d)&&ge(e,d):"number"==typeof d&&ge(e,""+d):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=d&&"onScroll"===i&&Pr("scroll",e):null!=d&&w(e,i,d,u))}switch(n){case"input":q(e),re(e,r,!1);break;case"textarea":q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+X(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?le(e,!!r.multiple,i,!1):null!=r.defaultValue&&le(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Vr)}Wr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ql(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));n=Oo(No.current),Oo(Po.current),Ko(t)?(r=t.stateNode,n=t.memoizedProps,r[qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[qr]=t,t.stateNode=r)}return null;case 13:return sa(zo),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ko(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zo.current)?0===Ii&&(Ii=3):(0!==Ii&&3!==Ii||(Ii=4),null===Ni||0==(134217727&Vi)&&0==(134217727&Bi)||hs(Ni,Ai))),(r||n)&&(t.flags|=4),null);case 4:return Lo(),Yl(t),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return to(t),null;case 19:if(sa(zo),null===(r=t.memoizedState))return null;if(i=0!=(64&t.flags),null===(u=r.rendering))if(i)ri(r,!1);else{if(0!==Ii||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Do(e))){for(t.flags|=64,ri(r,!1),null!==(i=u.updateQueue)&&(t.updateQueue=i,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ua(zo,1&zo.current|2),t.child}e=e.sibling}null!==r.tail&&Wa()>Hi&&(t.flags|=64,i=!0,ri(r,!1),t.lanes=33554432)}else{if(!i)if(null!==(e=Do(u))){if(t.flags|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ri(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!jo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wa()-r.renderingStartTime>Hi&&1073741824!==n&&(t.flags|=64,i=!0,ri(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wa(),n.sibling=null,t=zo.current,ua(zo,i?1&t|2:1&t),n):null;case 23:case 24:return ys(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(l(156,t.tag))}function oi(e){switch(e.tag){case 1:ha(e.type)&&va();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Lo(),sa(fa),sa(da),Xo(),0!=(64&(t=e.flags)))throw Error(l(285));return e.flags=-4097&t|64,e;case 5:return Io(e),null;case 13:return sa(zo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return sa(zo),null;case 4:return Lo(),null;case 10:return to(e),null;case 23:case 24:return ys(),null;default:return null}}function li(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ii(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Gl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Yl=function(){},Xl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Oo(Po.current);var l,i=null;switch(n){case"input":o=$(e,o),r=$(e,r),i=[];break;case"option":o=oe(e,o),r=oe(e,r),i=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":o=ie(e,o),r=ie(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Vr)}for(d in Se(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var u=o[d];for(l in u)u.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?i||(i=[]):(i=i||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Pr("scroll",e),i||u===c||(i=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(i=i||[]).push(d,c))}n&&(i=i||[]).push("style",n);var d=i;(t.updateQueue=d)&&(t.flags|=4)}},Ql=function(e,t,n,r){n!==r&&(t.flags|=4)};var si="function"==typeof WeakMap?WeakMap:Map;function ui(e,t,n){(n=so(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Yi||(Yi=!0,Xi=r),ii(0,t)},n}function ci(e,t,n){(n=so(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ii(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Qi?Qi=new Set([this]):Qi.add(this),ii(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var di="function"==typeof WeakSet?WeakSet:Set;function fi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Is(e,t)}else t.current=null}function pi(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Kr(t.stateNode.containerInfo))}throw Error(l(163))}function mi(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(As(n,e),Os(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qa(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&po(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}po(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Wr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))))}throw Error(l(163))}function hi(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=we("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vi(e,t){if(ka&&"function"==typeof ka.onCommitFiberUnmount)try{ka.onCommitFiberUnmount(Ea,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))As(t,n);else{r=t;try{a()}catch(e){Is(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fi(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Is(t,e)}break;case 5:fi(t);break;case 4:ki(e,t)}}function gi(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yi(e){return 5===e.tag||3===e.tag||4===e.tag}function bi(e){e:{for(var t=e.return;null!==t;){if(yi(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(l(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wi(e,n,t):Ei(e,n,t)}function wi(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vr));else if(4!==r&&null!==(e=e.child))for(wi(e,t,n),e=e.sibling;null!==e;)wi(e,t,n),e=e.sibling}function Ei(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Ei(e,t,n),e=e.sibling;null!==e;)Ei(e,t,n),e=e.sibling}function ki(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(l(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var i=e,s=a,u=s;;)if(vi(i,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(i=n,s=a.stateNode,8===i.nodeType?i.parentNode.removeChild(s):i.removeChild(s)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(vi(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function Si(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,a),t=Ce(e,r),a=0;a<o.length;a+=2){var i=o[a],s=o[a+1];"style"===i?Ee(n,s):"dangerouslySetInnerHTML"===i?ve(n,s):"children"===i?ge(n,s):w(n,i,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?le(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?le(n,!!r.multiple,r.defaultValue,!0):le(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Fi=Wa(),hi(t.child,!0)),void Ci(t);case 19:return void Ci(t);case 23:case 24:return void hi(t,null!==t.memoizedState)}throw Error(l(163))}function Ci(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new di),t.forEach((function(t){var r=Ds.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _i(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xi=Math.ceil,Ti=E.ReactCurrentDispatcher,Pi=E.ReactCurrentOwner,Mi=0,Ni=null,Oi=null,Ai=0,Li=0,Ri=ia(0),Ii=0,zi=null,Di=0,Vi=0,Bi=0,ji=0,Wi=null,Fi=0,Hi=1/0;function Ui(){Hi=Wa()+500}var Ki,Gi=null,Yi=!1,Xi=null,Qi=null,qi=!1,Ji=null,Zi=90,$i=[],es=[],ts=null,ns=0,rs=null,as=-1,os=0,ls=0,is=null,ss=!1;function us(){return 0!=(48&Mi)?Wa():-1!==as?as:as=Wa()}function cs(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Fa()?1:2;if(0===os&&(os=Di),0!==Xa.transition){0!==ls&&(ls=null!==Wi?Wi.pendingLanes:0),e=os;var t=4186112&~ls;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Fa(),e=Vt(0!=(4&Mi)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),os)}function ds(e,t,n){if(50<ns)throw ns=0,rs=null,Error(l(185));if(null===(e=fs(e,t)))return null;Wt(e,t,n),e===Ni&&(Bi|=t,4===Ii&&hs(e,Ai));var r=Fa();1===t?0!=(8&Mi)&&0==(48&Mi)?vs(e):(ps(e,n),0===Mi&&(Ui(),Ga())):(0==(4&Mi)||98!==r&&99!==r||(null===ts?ts=new Set([e]):ts.add(e)),ps(e,n)),Wi=e}function fs(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ps(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var s=31-Ft(i),u=1<<s,c=o[s];if(-1===c){if(0==(u&r)||0!=(u&a)){c=t,It(u);var d=Rt;o[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);i&=~u}if(r=zt(e,e===Ni?Ai:0),t=Rt,0===r)null!==n&&(n!==Ia&&_a(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ia&&_a(n)}15===t?(n=vs.bind(null,e),null===Da?(Da=[n],Va=Ca(Na,Ya)):Da.push(n),n=Ia):14===t?n=Ka(99,vs.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(l(358,e))}}(t),n=Ka(n,ms.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ms(e){if(as=-1,ls=os=0,0!=(48&Mi))throw Error(l(327));var t=e.callbackNode;if(Ns()&&e.callbackNode!==t)return null;var n=zt(e,e===Ni?Ai:0);if(0===n)return null;var r=n,a=Mi;Mi|=16;var o=Es();for(Ni===e&&Ai===r||(Ui(),bs(e,r));;)try{Cs();break}catch(t){ws(e,t)}if(eo(),Ti.current=o,Mi=a,null!==Oi?r=0:(Ni=null,Ai=0,r=Ii),0!=(Di&Bi))bs(e,0);else if(0!==r){if(2===r&&(Mi|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(n=Dt(e))&&(r=ks(e,n))),1===r)throw t=zi,bs(e,0),hs(e,n),ps(e,Wa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(l(345));case 2:case 5:Ts(e);break;case 3:if(hs(e,n),(62914560&n)===n&&10<(r=Fi+500-Wa())){if(0!==zt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){us(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Hr(Ts.bind(null,e),r);break}Ts(e);break;case 4:if(hs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var i=31-Ft(n);o=1<<i,(i=r[i])>a&&(a=i),n&=~o}if(n=a,10<(n=(120>(n=Wa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xi(n/1960))-n)){e.timeoutHandle=Hr(Ts.bind(null,e),n);break}Ts(e);break;default:throw Error(l(329))}}return ps(e,Wa()),e.callbackNode===t?ms.bind(null,e):null}function hs(e,t){for(t&=~ji,t&=~Bi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ft(t),r=1<<n;e[n]=-1,t&=~r}}function vs(e){if(0!=(48&Mi))throw Error(l(327));if(Ns(),e===Ni&&0!=(e.expiredLanes&Ai)){var t=Ai,n=ks(e,t);0!=(Di&Bi)&&(n=ks(e,t=zt(e,t)))}else n=ks(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Mi|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(t=Dt(e))&&(n=ks(e,t))),1===n)throw n=zi,bs(e,0),hs(e,t),ps(e,Wa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ts(e),ps(e,Wa()),null}function gs(e,t){ua(Ri,Li),Li|=t,Di|=t}function ys(){Li=Ri.current,sa(Ri)}function bs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Oi)for(n=Oi.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&va();break;case 3:Lo(),sa(fa),sa(da),Xo();break;case 5:Io(r);break;case 4:Lo();break;case 13:case 19:sa(zo);break;case 10:to(r);break;case 23:case 24:ys()}n=n.return}Ni=e,Oi=Ws(e.current,null),Ai=Li=Di=t,Ii=0,zi=null,ji=Bi=Vi=0}function ws(e,t){for(;;){var n=Oi;try{if(eo(),Qo.current=Nl,tl){for(var r=Zo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}tl=!1}if(Jo=0,el=$o=Zo=null,nl=!1,Pi.current=null,null===n||null===n.return){Ii=1,zi=t,Oi=null;break}e:{var o=e,l=n.return,i=n,s=t;if(t=Ai,i.flags|=2048,i.firstEffect=i.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.lanes=c.lanes):(i.updateQueue=null,i.memoizedState=null)}var d=0!=(1&zo.current),f=l;do{var p;if(p=13===f.tag){var m=f.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!d)}}if(p){var v=f.updateQueue;if(null===v){var g=new Set;g.add(u),f.updateQueue=g}else v.add(u);if(0==(2&f.mode)){if(f.flags|=64,i.flags|=16384,i.flags&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=so(-1,1);y.tag=2,uo(i,y)}i.lanes|=1;break e}s=void 0,i=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new si,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(i)){s.add(i);var w=zs.bind(null,o,u,i);u.then(w,w)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error((Y(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ii&&(Ii=2),s=li(s,i),f=l;do{switch(f.tag){case 3:o=s,f.flags|=4096,t&=-t,f.lanes|=t,co(f,ui(0,o,t));break e;case 1:o=s;var E=f.type,k=f.stateNode;if(0==(64&f.flags)&&("function"==typeof E.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Qi||!Qi.has(k)))){f.flags|=4096,t&=-t,f.lanes|=t,co(f,ci(f,o,t));break e}}f=f.return}while(null!==f)}xs(n)}catch(e){t=e,Oi===n&&null!==n&&(Oi=n=n.return);continue}break}}function Es(){var e=Ti.current;return Ti.current=Nl,null===e?Nl:e}function ks(e,t){var n=Mi;Mi|=16;var r=Es();for(Ni===e&&Ai===t||bs(e,t);;)try{Ss();break}catch(t){ws(e,t)}if(eo(),Mi=n,Ti.current=r,null!==Oi)throw Error(l(261));return Ni=null,Ai=0,Ii}function Ss(){for(;null!==Oi;)_s(Oi)}function Cs(){for(;null!==Oi&&!xa();)_s(Oi)}function _s(e){var t=Ki(e.alternate,e,Li);e.memoizedProps=e.pendingProps,null===t?xs(e):Oi=t,Pi.current=null}function xs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ai(n,t,Li)))return void(Oi=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Li)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=oi(t)))return n.flags&=2047,void(Oi=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Oi=t);Oi=t=e}while(null!==t);0===Ii&&(Ii=5)}function Ts(e){var t=Fa();return Ua(99,Ps.bind(null,e,t)),null}function Ps(e,t){do{Ns()}while(null!==Ji);if(0!=(48&Mi))throw Error(l(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var i=e.eventTimes,s=e.expirationTimes;0<o;){var u=31-Ft(o),c=1<<u;a[u]=0,i[u]=-1,s[u]=-1,o&=~c}if(null!==ts&&0==(24&r)&&ts.has(e)&&ts.delete(e),e===Ni&&(Oi=Ni=null,Ai=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Mi,Mi|=32,Pi.current=null,Br=Yt,hr(i=mr())){if("selectionStart"in i)s={start:i.selectionStart,end:i.selectionEnd};else e:if(s=(s=i.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,f=-1,p=-1,m=0,h=0,v=i,g=null;t:for(;;){for(var y;v!==s||0!==o&&3!==v.nodeType||(f=d+o),v!==u||0!==c&&3!==v.nodeType||(p=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===i)break t;if(g===s&&++m===o&&(f=d),g===u&&++h===c&&(p=d),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}s=-1===f||-1===p?null:{start:f,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;jr={focusedElem:i,selectionRange:s},Yt=!1,is=null,ss=!1,Gi=r;do{try{Ms()}catch(e){if(null===Gi)throw Error(l(330));Is(Gi,e),Gi=Gi.nextEffect}}while(null!==Gi);is=null,Gi=r;do{try{for(i=e;null!==Gi;){var b=Gi.flags;if(16&b&&ge(Gi.stateNode,""),128&b){var w=Gi.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:bi(Gi),Gi.flags&=-3;break;case 6:bi(Gi),Gi.flags&=-3,Si(Gi.alternate,Gi);break;case 1024:Gi.flags&=-1025;break;case 1028:Gi.flags&=-1025,Si(Gi.alternate,Gi);break;case 4:Si(Gi.alternate,Gi);break;case 8:ki(i,s=Gi);var k=s.alternate;gi(s),null!==k&&gi(k)}Gi=Gi.nextEffect}}catch(e){if(null===Gi)throw Error(l(330));Is(Gi,e),Gi=Gi.nextEffect}}while(null!==Gi);if(E=jr,w=mr(),b=E.focusedElem,i=E.selectionRange,w!==b&&b&&b.ownerDocument&&pr(b.ownerDocument.documentElement,b)){null!==i&&hr(b)&&(w=i.start,void 0===(E=i.end)&&(E=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(E,b.value.length)):(E=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),s=b.textContent.length,k=Math.min(i.start,s),i=void 0===i.end?k:Math.min(i.end,s),!E.extend&&k>i&&(s=i,i=k,k=s),s=fr(b,k),o=fr(b,i),s&&o&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==o.node||E.focusOffset!==o.offset)&&((w=w.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),k>i?(E.addRange(w),E.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),E.addRange(w))))),w=[];for(E=b;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(E=w[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Yt=!!Br,jr=Br=null,e.current=n,Gi=r;do{try{for(b=e;null!==Gi;){var S=Gi.flags;if(36&S&&mi(b,Gi.alternate,Gi),128&S){w=void 0;var C=Gi.ref;if(null!==C){var _=Gi.stateNode;Gi.tag,w=_,"function"==typeof C?C(w):C.current=w}}Gi=Gi.nextEffect}}catch(e){if(null===Gi)throw Error(l(330));Is(Gi,e),Gi=Gi.nextEffect}}while(null!==Gi);Gi=null,za(),Mi=a}else e.current=n;if(qi)qi=!1,Ji=e,Zi=t;else for(Gi=r;null!==Gi;)t=Gi.nextEffect,Gi.nextEffect=null,8&Gi.flags&&((S=Gi).sibling=null,S.stateNode=null),Gi=t;if(0===(r=e.pendingLanes)&&(Qi=null),1===r?e===rs?ns++:(ns=0,rs=e):ns=0,n=n.stateNode,ka&&"function"==typeof ka.onCommitFiberRoot)try{ka.onCommitFiberRoot(Ea,n,void 0,64==(64&n.current.flags))}catch(e){}if(ps(e,Wa()),Yi)throw Yi=!1,e=Xi,Xi=null,e;return 0!=(8&Mi)||Ga(),null}function Ms(){for(;null!==Gi;){var e=Gi.alternate;ss||null===is||(0!=(8&Gi.flags)?Ze(Gi,is)&&(ss=!0):13===Gi.tag&&_i(e,Gi)&&Ze(Gi,is)&&(ss=!0));var t=Gi.flags;0!=(256&t)&&pi(e,Gi),0==(512&t)||qi||(qi=!0,Ka(97,(function(){return Ns(),null}))),Gi=Gi.nextEffect}}function Ns(){if(90!==Zi){var e=97<Zi?97:Zi;return Zi=90,Ua(e,Ls)}return!1}function Os(e,t){$i.push(t,e),qi||(qi=!0,Ka(97,(function(){return Ns(),null})))}function As(e,t){es.push(t,e),qi||(qi=!0,Ka(97,(function(){return Ns(),null})))}function Ls(){if(null===Ji)return!1;var e=Ji;if(Ji=null,0!=(48&Mi))throw Error(l(331));var t=Mi;Mi|=32;var n=es;es=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],i=a.destroy;if(a.destroy=void 0,"function"==typeof i)try{i()}catch(e){if(null===o)throw Error(l(330));Is(o,e)}}for(n=$i,$i=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var s=a.create;a.destroy=s()}catch(e){if(null===o)throw Error(l(330));Is(o,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Mi=t,Ga(),!0}function Rs(e,t,n){uo(e,t=ui(0,t=li(n,t),1)),t=us(),null!==(e=fs(e,1))&&(Wt(e,1,t),ps(e,t))}function Is(e,t){if(3===e.tag)Rs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qi||!Qi.has(r))){var a=ci(n,e=li(t,e),1);if(uo(n,a),a=us(),null!==(n=fs(n,1)))Wt(n,1,a),ps(n,a);else if("function"==typeof r.componentDidCatch&&(null===Qi||!Qi.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=us(),e.pingedLanes|=e.suspendedLanes&n,Ni===e&&(Ai&n)===n&&(4===Ii||3===Ii&&(62914560&Ai)===Ai&&500>Wa()-Fi?bs(e,0):ji|=n),ps(e,t)}function Ds(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Fa()?1:2:(0===os&&(os=Di),0===(t=Bt(62914560&~os))&&(t=4194304))),n=us(),null!==(e=fs(e,t))&&(Wt(e,t,n),ps(e,n))}function Vs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bs(e,t,n,r){return new Vs(e,t,n,r)}function js(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ws(e,t){var n=e.alternate;return null===n?((n=Bs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fs(e,t,n,r,a,o){var i=2;if(r=e,"function"==typeof e)js(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case C:return Hs(n.children,a,o,t);case z:i=8,a|=16;break;case _:i=8,a|=1;break;case x:return(e=Bs(12,n,t,8|a)).elementType=x,e.type=x,e.lanes=o,e;case N:return(e=Bs(13,n,t,a)).type=N,e.elementType=N,e.lanes=o,e;case O:return(e=Bs(19,n,t,a)).elementType=O,e.lanes=o,e;case D:return Us(n,a,o,t);case V:return(e=Bs(24,n,t,a)).elementType=V,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:i=10;break e;case P:i=9;break e;case M:i=11;break e;case A:i=14;break e;case L:i=16,r=null;break e;case R:i=22;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=Bs(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Hs(e,t,n,r){return(e=Bs(7,e,r,t)).lanes=n,e}function Us(e,t,n,r){return(e=Bs(23,e,r,t)).elementType=D,e.lanes=n,e}function Ks(e,t,n){return(e=Bs(6,e,null,t)).lanes=n,e}function Gs(e,t,n){return(t=Bs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ys(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=jt(0),this.expirationTimes=jt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=jt(0),this.mutableSourceEagerHydrationData=null}function Xs(e,t,n,r){var a=t.current,o=us(),i=cs(a);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(l(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(ha(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(l(171))}if(1===n.tag){var u=n.type;if(ha(u)){n=ya(n,u,s);break e}}n=s}else n=ca;return null===t.context?t.context=n:t.pendingContext=n,(t=so(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(a,t),ds(a,i,o),i}function Qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Js(e,t){qs(e,t),(e=e.alternate)&&qs(e,t)}function Zs(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ys(e,t,null!=n&&!0===n.hydrate),t=Bs(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,lo(t),e[Zr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function $s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o._internalRoot;if("function"==typeof a){var i=a;a=function(){var e=Qs(l);i.call(e)}}Xs(t,l,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zs(e,0,t?{hydrate:!0}:void 0)}(n,r),l=o._internalRoot,"function"==typeof a){var s=a;a=function(){var e=Qs(l);s.call(e)}}!function(e,t){var n=Mi;Mi&=-2,Mi|=8;try{return e(t)}finally{0===(Mi=n)&&(Ui(),Ga())}}((function(){Xs(t,l,e,a)}))}return Qs(l)}Ki=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fa.current)Il=!0;else{if(0==(n&r)){switch(Il=!1,t.tag){case 3:Kl(t),Go();break;case 5:Ro(t);break;case 1:ha(t.type)&&ba(t);break;case 4:Ao(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ua(qa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Jl(e,t,n):(ua(zo,1&zo.current),null!==(t=ni(e,t,n))?t.sibling:null);ua(zo,1&zo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ti(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ua(zo,zo.current),r)break;return null;case 23:case 24:return t.lanes=0,jl(e,t,n)}return ni(e,t,n)}Il=0!=(16384&e.flags)}else Il=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=ma(t,da.current),ro(t,n),a=ol(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ha(r)){var o=!0;ba(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,lo(t);var i=r.getDerivedStateFromProps;"function"==typeof i&&ho(t,r,i,e),a.updater=vo,t.stateNode=a,a._reactInternals=t,wo(t,r,e,n),t=Ul(null,t,r,!0,o,n)}else t.tag=0,zl(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return js(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===A)return 14}return 2}(a),e=Qa(a,e),o){case 0:t=Fl(null,t,a,e,n);break e;case 1:t=Hl(null,t,a,e,n);break e;case 11:t=Dl(null,t,a,e,n);break e;case 14:t=Vl(null,t,a,Qa(a.type,e),r,n);break e}throw Error(l(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Fl(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Hl(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 3:if(Kl(t),r=t.updateQueue,null===e||null===r)throw Error(l(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,io(e,t),fo(t,r,null,n),(r=t.memoizedState.element)===a)Go(),t=ni(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(Bo=Gr(t.stateNode.containerInfo.firstChild),Vo=t,o=jo=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],Yo.push(o);for(n=xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else zl(e,t,r,n),Go();t=t.child}return t;case 5:return Ro(t),null===e&&Ho(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children,Fr(r,a)?i=null:null!==o&&Fr(r,o)&&(t.flags|=16),Wl(e,t),zl(e,t,i,n),t.child;case 6:return null===e&&Ho(t),null;case 13:return Jl(e,t,n);case 4:return Ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=_o(t,null,r,n):zl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Dl(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 7:return zl(e,t,t.pendingProps,n),t.child;case 8:case 12:return zl(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value;var s=t.type._context;if(ua(qa,s._currentValue),s._currentValue=o,null!==i)if(s=i.value,0==(o=sr(s,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,o):1073741823))){if(i.children===a.children&&!fa.current){t=ni(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){i=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===s.tag&&((c=so(-1,n&-n)).tag=2,uo(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),no(s.return,n),u.lanes|=n;break}c=c.next}}else i=10===s.tag&&s.type===t.type?null:s.child;if(null!==i)i.return=s;else for(i=s;null!==i;){if(i===t){i=null;break}if(null!==(s=i.sibling)){s.return=i.return,i=s;break}i=i.return}s=i}zl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,ro(t,n),r=r(a=ao(a,o.unstable_observedBits)),t.flags|=1,zl(e,t,r,n),t.child;case 14:return o=Qa(a=t.type,t.pendingProps),Vl(e,t,a,o=Qa(a.type,o),r,n);case 15:return Bl(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ha(r)?(e=!0,ba(t)):e=!1,ro(t,n),yo(t,r,a),wo(t,r,a,n),Ul(null,t,r,!0,e,n);case 19:return ti(e,t,n);case 23:case 24:return jl(e,t,n)}throw Error(l(156,t.tag))},Zs.prototype.render=function(e){Xs(e,this._internalRoot,null,null)},Zs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xs(null,e,null,(function(){t[Zr]=null}))},$e=function(e){13===e.tag&&(ds(e,4,us()),Js(e,4))},et=function(e){13===e.tag&&(ds(e,67108864,us()),Js(e,67108864))},tt=function(e){if(13===e.tag){var t=us(),n=cs(e);ds(e,n,t),Js(e,n)}},nt=function(e,t){return t()},xe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ra(r);if(!a)throw Error(l(90));J(r),ne(r,a)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&le(e,!!n.multiple,t,!1)}},Ae=function(e,t){var n=Mi;Mi|=1;try{return e(t)}finally{0===(Mi=n)&&(Ui(),Ga())}},Le=function(e,t,n,r,a){var o=Mi;Mi|=4;try{return Ua(98,e.bind(null,t,n,r,a))}finally{0===(Mi=o)&&(Ui(),Ga())}},Re=function(){0==(49&Mi)&&(function(){if(null!==ts){var e=ts;ts=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ps(e,Wa())}))}Ga()}(),Ns())},Ie=function(e,t){var n=Mi;Mi|=2;try{return e(t)}finally{0===(Mi=n)&&(Ui(),Ga())}};var tu={findFiberByHostInstance:ea,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Je(a),e;if(o===r)return Je(a),t;o=o.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}if(!i){for(s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{Ea=ru.inject(nu),ka=ru}catch(he){}}t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$s(t))throw Error(l(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.render=function(e,t,n){if(!$s(t))throw Error(l(200));return eu(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{"use strict";n(418);var r=n(294),a=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var o=Symbol.for;a=o("react.element"),t.Fragment=o("react.fragment")}var l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,o={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:o,_owner:l.current}}t.jsx=u,t.jsxs=u},408:(e,t,n)=>{"use strict";var r=n(418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var l=60109,i=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;a=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),l=d("react.provider"),i=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function v(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,o={},l=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)E.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:a,type:e,key:l,ref:i,props:o,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var _=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s=!1;if(null===e)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case a:case o:s=!0}}if(s)return l=l(s=e),e=""===r?"."+x(s,0):r,Array.isArray(l)?(n="",null!=e&&(n=e.replace(_,"$&/")+"/"),T(l,t,n,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,n+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+x(i=e[u],u);s+=T(i,t,n,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(i=e.next()).done;)s+=T(i=i.value,t,n,c=r+x(i,u++),l);else if("object"===i)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function P(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function M(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function O(){var e=N.current;if(null===e)throw Error(p(321));return e}var A={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),l=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=w.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)E.call(t,c)&&!k.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];o.children=u}return{$$typeof:a,type:e.type,key:l,ref:i,props:o,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();t.unstable_now=function(){return i.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,E=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?E.postMessage(null):(h=!1,v=null)}catch(e){throw E.postMessage(null),e}}else h=!1},n=function(e){v=e,h||(h=!0,E.postMessage(null))},r=function(e,n){g=f((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<_(a,t)))break e;e[r]=t,e[n]=a,n=r}}function S(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,l=e[o],i=o+1,s=e[i];if(void 0!==l&&0>_(l,n))void 0!==s&&0>_(s,l)?(e[r]=s,e[i]=n,r=i):(e[r]=l,e[o]=n,r=o);else{if(!(void 0!==s&&0>_(s,n)))break e;e[r]=s,e[i]=n,r=i}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],T=[],P=1,M=null,N=3,O=!1,A=!1,L=!1;function R(e){for(var t=S(T);null!==t;){if(null===t.callback)C(T);else{if(!(t.startTime<=e))break;C(T),t.sortIndex=t.expirationTime,k(x,t)}t=S(T)}}function I(e){if(L=!1,R(e),!A)if(null!==S(x))A=!0,n(z);else{var t=S(T);null!==t&&r(I,t.startTime-e)}}function z(e,n){A=!1,L&&(L=!1,a()),O=!0;var o=N;try{for(R(n),M=S(x);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var l=M.callback;if("function"==typeof l){M.callback=null,N=M.priorityLevel;var i=l(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?M.callback=i:M===S(x)&&C(x),R(n)}else C(x);M=S(x)}if(null!==M)var s=!0;else{var u=S(T);null!==u&&r(I,u.startTime-n),s=!1}return s}finally{M=null,N=o,O=!1}}var D=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||O||(A=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(x)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,o,l){var i=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?i+l:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:P++,callback:o,priorityLevel:e,startTime:l,expirationTime:s=l+s,sortIndex:-1},l>i?(e.sortIndex=l,k(T,e),null===S(x)&&e===S(T)&&(L?a():L=!0,r(I,l-i))):(e.sortIndex=s,k(x,e),A||O||(A=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e].call(o.exports,o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=a(893),t=a(935);var n=a(294),r=a.t(n,2);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}var f,p=function(){function e(t){var n=t.content;u(this,e),o(this,"isMounted",!1),o(this,"node",void 0),this.node=function(e){var t=!!document.importNode,n=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(n,!0):n}(n)}return d(e,[{key:"id",get:function(){return this.node.id}},{key:"mount",value:function(e){return this.isMounted||(this.isMounted=!0,e.appendChild(this.node)),this.node}},{key:"unmount",value:function(){this.node&&this.node.parentNode&&(this.node.parentNode.removeChild(this.node),this.isMounted=!1)}}],[{key:"createFromExistingNode",value:function(t){var n=new e({content:""});return n.node=t,n}}]),e}(),m=n.createContext({}),h=function(e){var t=e.children,r=s(e,["children"]),a=n.useMemo((function(){return r}),[r.classPrefix,r.globalClasses]);return n.createElement(m.Provider,{value:a},t)},v="http://www.w3.org/2000/svg",g=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};u(this,e),o(this,"symbols",new Map),o(this,"config",{attrs:{xmlns:v,"xmlns:xlink":"http://www.w3.org/1999/xlink",style:"position:absolute;width:0;height:0","aria-hidden":"true"}}),o(this,"node",null),Object.assign(this.config.attrs,t.attrs)}return d(e,[{key:"push",value:function(e){var t=this.symbols,n=t.has(e.id);return t.set(e.id,e),!n}},{key:"add",value:function(e){var t=this.push(e);return this.node&&t&&e.mount(this.node),t}},{key:"attach",value:function(e){var t=this;this.node||(this.node=e,this.symbols.forEach((function(t){t.mount(e)})),e.querySelectorAll("symbol").forEach((function(e){var n=p.createFromExistingNode(e);t.add(n)})))}},{key:"mount",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.node||(this.node=this.render(),t&&e.childNodes[0]?e.insertBefore(this.node,e.firstChild):e.appendChild(this.node)),this.node}},{key:"render",value:function(){var e=document.createElementNS(v,"svg");return Object.entries(this.config.attrs).forEach((function(t){return e.setAttribute(t[0],t[1])})),this.symbols.forEach((function(t){return e.appendChild(t.node)})),e}},{key:"unmount",value:function(){this.node&&this.node.parentNode&&this.node.parentNode.removeChild(this.node)}}]),e}(),y=!("undefined"==typeof window||!window.document||!window.document.createElement);if(y){var b="__SVG_SPRITE_NODE__";f=new g({attrs:{id:b}});var w=function(){var e=document.getElementById(b);e?f.attach(e):f.mount(document.body),document.removeEventListener("DOMContentLoaded",w)};document.querySelector("body")?w():document.addEventListener("DOMContentLoaded",w)}else f=null;var E=y?n.useLayoutEffect:n.useEffect,k=function(e){var t=e.width,r=void 0===t?0:t,a=e.height,o=void 0===a?0:a,u=e.viewBox,c=e.id,d=e.className,f=void 0===d?"":d,p=e.fill,h=e.getRootRef,v=e.style,g=void 0===v?{}:v,y=e.title,b=e.children,w=s(e,["width","height","viewBox","id","className","fill","getRootRef","style","title","children"]),E=Math.max(r,o),k=n.useContext(m),S=function(e,t){for(var n=t.classPrefix,r=t.globalClasses,a="",o=0;o<e.length;o++)n&&(a+=" "+(n+e[o])),n&&!r||(a+=" "+e[o]);return a}(["Icon","Icon--".concat(E),"Icon--w-".concat(r),"Icon--h-".concat(o),"Icon--".concat(c)],k),C=l({width:r,height:o},g);return n.createElement("svg",i(l({"aria-hidden":"true",display:"block"},w),{className:"".concat(S," ").concat(f),viewBox:u,width:r,height:o,style:C,ref:h}),y&&n.createElement("title",null,y),n.createElement("use",{xlinkHref:"#".concat(c),style:{fill:"currentColor",color:p}},b))};function S(e,t,r,a,o,s,u,c){var d=function(){var e;m||(e=new p({content:a}),f&&f.add(e),m=!0)},m=!1,h=function(e){var t={};return function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"warn";t[n]||(console[r]("[@vkontakte/icons][".concat(e,"] ").concat(n)),t[n]=!0)}}(e),v=function(e){if(E(d,[]),u){var a=c?". Замените на ".concat(c):"";h("Иконка устарела"+a)}return n.createElement(k,i(l({},e),{viewBox:r,id:t,width:void 0===e.width||isNaN(e.width)?o:+e.width,height:void 0===e.height||isNaN(e.height)?s:+e.height}))};return v.mountIcon=d,v.displayName=e,v}function C(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=[];return t.forEach((function(e){var t;if(e)switch(void 0===e?"undefined":(t=e)&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t){case"string":r.push(e);break;case"object":Object.keys(e).forEach((function(t){e[t]&&r.push(t)}));break;default:r.push("".concat(e))}})),r.join(" ")}var _=function(){},x=function(e){if("string"!=typeof e)return{};if(!(e=e.trim().replace(/^[?#&]/,"")))return{};var t=/\?(.+)$/gi.exec(e);return(t?t[1]:e).split("&").reduce((function(e,t){var n=t.split("=");return n[1]&&(e[n[0]]=decodeURIComponent(n[1])),e}),{})};function T(e){return void 0!==e&&!1!==e&&null!==e&&""!==e}function P(e){return"string"==typeof e||"number"==typeof e}function M(e){return"function"==typeof e}var N=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}();function O(e){e||(e=N?navigator.userAgent:"");var t=function(e){if(!N)return!1;var t=!/ipad|iphone|ipod/.test(e);return!(!/mac os/.test(e)||!t||"boolean"!=typeof navigator.standalone)}(e=e.toLowerCase()),n=t||-1!==e.indexOf("ipad"),r=!n&&-1!==e.search(/iphone|ipod/),a=r||n,o=a&&e.match(/os ([\d_]+) like mac os x/i),l=0,i=0;t?(l=13,i=0):o&&(l=+(o=o[1].split("_"))[0],i=+o[1]),o=null;var s=l<13&&!(11===l&&i<3),u=a&&function(e){if(!N)return!1;var t=window.webkit;if(t&&t.messageHandlers)return!0;var n=/constructor/i.test(String(window.HTMLElement)),r=!!window.indexedDB;if(-1===e.indexOf("safari")||-1===e.indexOf("version")||navigator.standalone)if(!r&&n||!window.statusbar||!window.statusbar.visible);else if(!n||r)return!0;return!1}(e),c=!1;return N&&(c=a&&375===screen.width&&812===screen.height&&3===window.devicePixelRatio),{isIPad:n,isIPhone:r,isIOS:a,isIPadOS:t,iosMajor:l,iosMinor:i,isWKWebView:u,isScrollBasedViewport:s,isIPhoneX:c,isIOSChrome:-1!==e.search(/crios/i)}}var A=O(),L=function(){return A.isIOS}(),R=function(){return A.isIPadOS}(),I=function(){var e={hasMouse:!1,hasTouchEvents:!1,hasHover:!1,hasTouch:!1};if(!N)return e;if(L&&!R)e.hasMouse=!1,e.hasHover=!1,e.hasTouchEvents=!0,e.hasTouch=!0;else if(e.hasTouchEvents="ontouchstart"in document,e.hasTouch=e.hasTouchEvents||"maxTouchPoints"in navigator&&navigator.maxTouchPoints>0,e.hasTouch){var t=!/android|mobile|tablet/i.test(navigator.userAgent);e.hasMouse="function"==typeof window.matchMedia&&window.matchMedia("(pointer)").matches?matchMedia("(pointer: fine)").matches:t,e.hasHover=e.hasMouse&&("function"==typeof window.matchMedia&&window.matchMedia("(hover)").matches?matchMedia("(hover: hover)").matches:t)}else e.hasMouse=!0,e.hasHover=!0;return e}(),z=function(){return I.hasMouse}(),D=function(){return I.hasHover}();const V=n.createContext({}),B=()=>n.useContext(V);var j,W=a(476),F=a.n(W);!function(e){e.IOS="ios",e.UNKNOWN=""}(j||(j={}));const H={};function U(e){return{matches:!1,media:e,onchange:_,addListener:_,removeListener:_,addEventListener:_,removeEventListener:_,dispatchEvent:()=>!1}}var K;!function(e){e.ANDROID="android",e.IOS="ios",e.VKCOM="vkcom"}(K||(K={}));const G={desktop_web:K.VKCOM},Y=N?function(e){try{const t=x(e).vk_platform;return"string"==typeof t&&t in G?G[t]:void 0}catch(e){return void console.warn(e)}}(location.search):void 0;var X;!function(e){e.VKAPPS="vkapps",e.INTERNAL="internal"}(X||(X={}));const Q=n.createContext({webviewType:X.VKAPPS,isWebView:F().isWebView(),transitionMotionEnabled:!0,platform:Y||(q||(q=function(e=""){if(H[e])return H[e];let t=null,n=j.UNKNOWN;const{isIOS:r,iosMajor:a,iosMinor:o}=O(e);r&&(n=j.IOS,t={major:a,minor:o});const l={userAgent:e,system:n,systemVersion:t};return H[e]=l,l}()),"ios"===q.system?K.IOS:K.ANDROID),appearance:void 0,locale:"ru"});var q;const J=()=>n.useContext(Q);function Z(){const{appearance:e}=J();return e??"light"}const $=N?n.useLayoutEffect:n.useEffect;let ee={bottom:null,top:null,left:null,right:null};function te(e){const{type:t,data:n}=e.detail;switch(t){case"VKWebAppUpdateConfig":case"VKWebAppUpdateInsets":const{insets:e}=n;if(e)return{...e,bottom:e.bottom>150?0:e.bottom}}return null}var ne;F().subscribe((e=>{const t=te(e);t&&(ee=t)})),function(e){e.ENTER="Enter",e.SPACE="Space",e.TAB="Tab",e.ESCAPE="Escape",e.HOME="Home",e.END="End",e.ARROW_LEFT="ArrowLeft",e.ARROW_RIGHT="ArrowRight",e.ARROW_DOWN="ArrowDown"}(ne||(ne={}));const re=[{code:ne.ENTER,key:["Enter"],keyCode:13},{code:ne.SPACE,key:["Space","Spacebar"," "],keyCode:32},{code:ne.TAB,key:["Tab"],keyCode:9},{code:ne.ESCAPE,key:["Escape"],keyCode:27},{code:ne.HOME,key:["Home"],keyCode:36},{code:ne.END,key:["End"],keyCode:35},{code:ne.ARROW_LEFT,key:["ArrowLeft"],keyCode:37},{code:ne.ARROW_RIGHT,key:["ArrowRight"],keyCode:39},{code:ne.ARROW_DOWN,key:["ArrowDown"],keyCode:40}];function ae(e){return re.find((({key:t,keyCode:n})=>t.includes(e.key)||n===e.keyCode))?.code||null}const oe=n.createContext({window:N?window:void 0,document:N?document:void 0}),le=()=>n.useContext(oe);function ie(e){e&&e.activeElement&&e.activeElement.blur()}function se(e,t,r){const a=n.useRef(t);$((()=>{a.current=t}),[t]);const o=n.useCallback((e=>a.current&&a.current(e)),[]),l=n.useRef(_),i=n.useCallback((()=>{l.current(),l.current=_}),[]),s=n.useCallback((t=>{if(!N)return;if(i(),!t)return;const n={...r};t.addEventListener(e,o,n),l.current=()=>t.removeEventListener(e,o,n)}),[r,o,e,i]);return n.useEffect((()=>i),[i]),n.useMemo((()=>({add:s,remove:i})),[s,i])}function ue(e,t,n,r){const a=se(t,n,r);$((()=>{n&&e?a.add(e):a.remove()}),[Boolean(n),Boolean(e)])}var ce,de,fe;!function(e){e[e.SMALL_MOBILE=1]="SMALL_MOBILE",e[e.MOBILE=2]="MOBILE",e[e.SMALL_TABLET=3]="SMALL_TABLET",e[e.TABLET=4]="TABLET",e[e.DESKTOP=5]="DESKTOP"}(ce||(ce={})),function(e){e[e.EXTRA_SMALL=1]="EXTRA_SMALL",e[e.SMALL=2]="SMALL",e[e.MEDIUM=3]="MEDIUM"}(de||(de={})),function(e){e.COMPACT="compact",e.REGULAR="regular"}(fe||(fe={}));const pe={[ce.SMALL_MOBILE]:"smallMobileMinus",[ce.MOBILE]:"mobile",[ce.SMALL_TABLET]:"smallTablet",[ce.TABLET]:"tablet",[ce.DESKTOP]:"desktopPlus"},me=n.createContext({portalRoot:null}),he=(e,t,n)=>Math.max(t,Math.min(e,n)),ve=e=>{Object.assign(e.style,{position:"",top:"",left:"",right:"",overflowY:"",overflowX:""})},ge=e=>{const t=e.document.documentElement.clientHeight-e.innerHeight;return e.pageYOffset-t},ye=n.createContext({getScroll:()=>({x:0,y:0}),scrollTo:_,isScrollLock:!1,enableScrollLock:_,disableScrollLock:_}),be=()=>n.useContext(ye),we=({children:e})=>{const{window:t,document:r}=le(),[a,o]=n.useState(!1),l=n.useRef(new Set),i=n.useCallback((()=>({x:t.pageXOffset,y:ge(t)})),[t]),s=n.useCallback(((e=0,n=0)=>{t.scrollTo(e?he(e,0,r.body.scrollWidth-t.innerWidth):0,n?he(n,0,r.body.scrollHeight-t.innerHeight):0)}),[r,t]),u=n.useCallback((()=>{l.current.forEach((e=>{e()}));const e=t.pageYOffset,n=t.pageXOffset,a=t.innerWidth>r.documentElement.clientWidth?"scroll":"",i=t.innerHeight>r.documentElement.clientHeight?"scroll":"";Object.assign(r.body.style,{position:"fixed",top:`-${e}px`,left:`-${n}px`,right:"0",overflowY:a,overflowX:i}),o(!0)}),[r,t]),c=n.useCallback((()=>{const e=r.body.style.top,n=r.body.style.left;ve(r.body),t.scrollTo(-parseInt(n||"0"),-parseInt(e||"0")),o(!1)}),[r,t]),d=n.useMemo((()=>({getScroll:i,scrollTo:s,isScrollLock:a,disableScrollLock:c,enableScrollLock:u,beforeScrollLockFnSetRef:l})),[i,s,a,c,u]);return n.createElement(ye.Provider,{value:d},e)},Ee=({elRef:e,children:t})=>{const[r,a]=n.useState(!1),o=n.useRef(new Set),l=n.useCallback((()=>({x:e.current?.scrollLeft??0,y:e.current?.scrollTop??0})),[e]),i=n.useCallback(((t=0,n=0)=>{const r=e.current;r?.scrollTo(t?he(t,0,r.scrollWidth-r.clientWidth):0,n?he(n,0,r.scrollHeight-r.clientHeight):0)}),[e]),s=n.useCallback((()=>{const t=e.current;if(!t)return;o.current.forEach((e=>{e()}));const n=t.scrollTop,r=t.scrollLeft,l=t.scrollWidth>t.clientWidth?"scroll":"",i=t.scrollHeight>t.clientHeight?"scroll":"";Object.assign(t.style,{position:"absolute",top:`-${n}px`,left:`-${r}px`,right:"0",overflowY:l,overflowX:i}),a(!0)}),[e]),u=n.useCallback((()=>{const t=e.current;if(!t)return;const n=t.style.top,r=t.style.left;ve(t),t.scrollTo(-parseInt(r||"0"),-parseInt(n||"0")),a(!1)}),[e]),c=n.useMemo((()=>({getScroll:l,scrollTo:i,isScrollLock:r,disableScrollLock:u,enableScrollLock:s,beforeScrollLockFnSetRef:o})),[l,i,r,u,s]);return n.createElement(ye.Provider,{value:c},t)},ke=(e=!0)=>{const{enableScrollLock:t,disableScrollLock:n}=be();$((()=>e?(t(),n):_),[t,n,e])},Se={none:"vkui--sizeX-none",[fe.REGULAR]:"vkui--sizeX-regular"},Ce="--vkui_internal--safe_area_inset_",_e=({children:e,mode:t="full",scroll:r="global",portalRoot:a=null,disablePortal:o,className:l,...i})=>{const s=function(){const{document:e}=le(),[t,r]=n.useState(!1),a=n.useCallback((()=>{r(!0)}),[]),o=n.useCallback((e=>{ae(e)===ne.TAB&&a()}),[a]),l=n.useCallback((()=>{r(!1)}),[]),i={passive:!0,capture:!0};return ue(e,"keydown",o,i),ue(e,"mousedown",l,i),ue(e,"touchstart",l,i),ue(e,"enableKeyboardInput",a,i),ue(e,"disableKeyboardInput",l,i),t}(),u=n.useRef(null),[c,d]=n.useState(null),{document:f}=le(),p=function(){const[e,t]=n.useState(ee);return $((()=>{function e(e){const n=te(e);n&&t(n)}return F().subscribe(e),()=>{F().unsubscribe(e)}}),[]),e}(),m=Z(),{hasPointer:v,sizeX:g="none"}=B();$((()=>{let e=null;var t;return a&&(e="object"==typeof(t=a)&&null!==t&&t.hasOwnProperty("current")?a.current:a),e||(e=f.createElement("div"),f.body.appendChild(e)),d(e),()=>{e?.parentElement?.removeChild(e)}}),[a]),$((()=>{if("partial"===t)return _;const e=u.current?.parentElement,n=["vkui__root"].concat("embedded"===t?"vkui__root--embedded":[]);return e?.classList.add(...n),()=>{e?.classList.remove(...n)}}),[]),$((()=>{if("full"===t)return f.documentElement.classList.add("vkui"),()=>{f.documentElement.classList.remove("vkui")}}),[f,t]),$((()=>{if("partial"===t||!u.current?.parentElement)return _;const e=u.current.parentElement;let n;for(n in p)if(p.hasOwnProperty(n)&&"number"==typeof p[n]){const t=p[n];e.style.setProperty(Ce+n,`${t}px`),c&&c.style.setProperty(Ce+n,`${t}px`)}return()=>{let t;for(t in p)p.hasOwnProperty(t)&&(e.style.removeProperty(Ce+t),c&&c.style.removeProperty(Ce+t))}}),[p,c]),$((()=>{if("partial"===t)return _;const e=g!==fe.COMPACT?Se[g]:null,n="embedded"===t?u.current?.parentElement:f.body;return null!==e&&n?(n.classList.add(e),()=>{n.classList.remove(e)}):_}),[g]),$((()=>"full"!==t||void 0===m?_:(f.documentElement.style.setProperty("color-scheme",m),()=>f.documentElement.style.removeProperty("color-scheme"))),[m]);const y=n.useMemo((()=>"contain"===r?Ee:we),[r]),b=n.createElement(me.Provider,{value:{appRoot:u,portalRoot:c,embedded:"embedded"===t,keyboardInput:s,mode:t,disablePortal:o}},n.createElement(y,{elRef:u},n.createElement(h,{classPrefix:"vkui"},e)));return"partial"===t?b:n.createElement("div",{ref:u,className:C("wGiqT6Ej1Ou100dxsDGQ",void 0===v?"qVNj50BmA1lzdL1f80N5":!v&&"IAMvVL7NBViK4rr5s_sn",l),...i},b)};function xe(){const{platform:e}=J();return e}const Te=S("Icon16Spinner","spinner_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" id="spinner_16"><path fill="currentColor" fill-rule="evenodd" d="M11.21 2.93a6 6 0 0 0-8.64 7.62 1 1 0 1 1-1.8.86A8 8 0 1 1 8 16a1 1 0 1 1 0-2 6 6 0 0 0 3.21-11.07z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0),Pe=S("Icon24Spinner","spinner_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="spinner_24"><path fill="currentColor" fill-rule="evenodd" d="M16.394 5.077A8.2 8.2 0 0 0 4.58 15.49a.9.9 0 0 1-1.628.767A10 10 0 1 1 12 22a.9.9 0 0 1 0-1.8 8.2 8.2 0 0 0 4.394-15.123z" clip-rule="evenodd" /></symbol>',24,24,!1,void 0),Me=S("Icon32Spinner","spinner_32","0 0 32 32",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" id="spinner_32"><path fill="currentColor" d="M16 32a1.5 1.5 0 0 1 0-3c7.18 0 13-5.82 13-13S23.18 3 16 3 3 8.82 3 16c0 1.557.273 3.074.8 4.502A1.5 1.5 0 1 1 .986 21.54 15.97 15.97 0 0 1 0 16C0 7.163 7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Z" /></symbol>',32,32,!1,void 0),Ne=S("Icon44Spinner","spinner_44","0 0 44 44",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" id="spinner_44"><path fill="currentColor" d="M22 44a1.5 1.5 0 0 1 0-3c10.493 0 19-8.507 19-19S32.493 3 22 3 3 11.507 3 22c0 2.208.376 4.363 1.103 6.397a1.5 1.5 0 1 1-2.825 1.01A21.964 21.964 0 0 1 0 22C0 9.85 9.85 0 22 0s22 9.85 22 22-9.85 22-22 22Z" /></symbol>',44,44,!1,void 0),Oe=n.memo((({size:e="regular","aria-label":t="Загружается...",className:r,...a})=>{const o={small:Te,regular:Pe,medium:Me,large:Ne}[e];return n.createElement("span",{role:"status","aria-label":t,...a,className:C("S0jOibwFCU7rJ5Jaav7k",r)},n.createElement(o,{className:"kd0BSwit20rUFsSPva6o"}))}));function Ae(e=!1){const[t,r]=n.useState(e);return n.useEffect((()=>{r(!0)}),[]),t}function Le(e=!0){const{hasPointer:t}=n.useContext(V),r=void 0===t?z:t;if(Ae(!e))return r}function Re(e,t){t&&("function"==typeof t?t(e):t.current=e)}function Ie(...e){let t=null;return{get current(){return t},set current(n){t=n,e.forEach((e=>e&&Re(n,e)))}}}function ze(e){let t="";return n.Children.map(e,(e=>{"string"==typeof e&&(t+=" "+e)})),t.trim()}Oe.displayName="Spinner";const De=e=>e.stopPropagation();function Ve(...e){const t=n.useRef(null);return n.useMemo((()=>({get current(){return t.current},set current(n){t.current=n,e.forEach((e=>{e&&Re(n,e)}))}})),e)}function Be(e,t){const r=n.useRef({cb:e,duration:t});$((()=>{r.current.cb=e,r.current.duration=t}),[e,t]);const a=n.useRef(),o=n.useCallback((()=>{N&&a?.current&&clearTimeout(a.current)}),[]),l=n.useCallback(((e=r.current.duration)=>{o(),N&&(a.current=setTimeout((()=>{const{cb:e}=r.current;"function"==typeof e&&e()}),e))}),[o]);return $((()=>o),[]),{set:l,clear:o}}const je=(...e)=>(...t)=>e.filter((e=>"function"==typeof e)).forEach((e=>e(...t))),We=e=>null!=e.clientX?e.clientX:e.changedTouches&&e.changedTouches[0].clientX,Fe=e=>null!=e.clientY?e.clientY:e.changedTouches&&e.changedTouches[0].clientY,He=()=>N&&"ontouchstart"in window;function Ue(){return He()?["touchstart","touchmove","touchend","touchcancel"]:["mousedown","mousemove","mouseup","mouseleave"]}function Ke(e,t,n,r){if(r||e<0)return e;const a=e*n;return a*t/(a+t)}const Ge=({visible:e,mode:t,thin:r})=>n.createElement("span",{"aria-hidden":!0,className:C("XzKEWlT234tlH1VhbcXy",e&&"O_oGqkPFzratNTm73OXy",r&&"lRbE0kMJhbS46kRsNZqg",{inside:"QsRLukmNHc5eNMNTwXPH",outside:"AqdZtbxjmYlRlAmZAWmP",outline:"hsx01BwQxfuYFf1DVaa4"}[t])}),Ye=({onStart:e,onStartX:t,onStartY:r,onMove:a,onMoveX:o,onMoveY:l,onLeave:i,onEnter:s,onEnd:u,onEndX:c,onEndY:d,onClickCapture:f,usePointerHover:p,slideThreshold:m=5,useCapture:h=!1,Component:v="div",getRootRef:g,noSlideClick:y=!1,stopPropagation:b=!1,...w})=>{const{document:E}=le(),k=n.useMemo(Ue,[]),S=n.useRef(!1),C=n.useRef(null),_=(e,t)=>{b&&e.stopPropagation(),t.forEach((t=>{const n=Date.now()-(C.current?.startT?.getTime()??0);t&&t({...C.current,duration:n,originalEvent:e})}))},x=se(p?"pointerenter":"mouseenter",s),T=se(p?"pointerleave":"mouseleave",i),P=se(k[0],(n=>{var a;C.current={startX:We(n),startY:Fe(n),startT:new Date,duration:0,isPressed:!0,isY:!1,isX:!1,isSlideX:!1,isSlideY:!1,isSlide:!1,shiftX:0,shiftY:0,shiftXAbs:0,shiftYAbs:0},_(n,[e,t,r]),(a=He()?n.target:E)&&A.forEach((e=>e.add(a)))}),{capture:h,passive:!1}),M=Ve(g);function N(e){const{isPressed:t,isSlide:n,isSlideX:r,isSlideY:a}=C.current??{};t&&_(e,[u,a&&d,r&&c]);const o=He();S.current=(!o||!n)&&Boolean(n),C.current={},o&&i&&i(e),A.forEach((e=>e.remove()))}$((()=>{const e=M.current;e&&(x.add(e),T.add(e),P.add(e))}),[v]);const O={capture:h,passive:!1},A=[se(k[1],(function(e){const{isPressed:t,isX:n,isY:r,startX:i=0,startY:s=0}=C.current??{};if(t){const t=We(e)-i,u=Fe(e)-s,c=Math.abs(t),d=Math.abs(u);if(e.touches&&e.touches.length>1)return N(e);if(!n&&!r){const e=c>=m&&c>d,t=d>=m&&d>c,n=e&&(!!o||!!a),r=t&&(!!l||!!a);C.current&&Object.assign(C.current,{isY:t,isX:e,isSlideX:n,isSlideY:r,isSlide:n||r})}C.current?.isSlide&&(Object.assign(C.current,{shiftX:t,shiftY:u,shiftXAbs:c,shiftYAbs:d}),_(e,[a,C.current.isSlideX&&o,C.current.isSlideY&&l]))}}),O),se(k[2],N,O),se(k[3],N,O)];return n.createElement(v,{...w,onDragStart:e=>{const t=e.target;"A"!==t.tagName&&"IMG"!==t.tagName||e.preventDefault()},onClickCapture:e=>{if(!S.current)return f&&f(e);y?(e.stopPropagation(),e.preventDefault()):f&&f(e),S.current=!1},ref:M})},Xe=n.createContext(!1),Qe={none:"F7pQIaDyalr6HKZ28H0S",compact:"ZucAtmWfxoS5oyBUUD4L"},qe=($e=$e||new Map,function(e,t){var n=$e.get(e);n?n.push(t):$e.set(e,[t])}),Je=function(e,t){var n=$e.get(e);n&&(t?n.splice(n.indexOf(t)>>>0,1):$e.set(e,[]))},Ze=function(e,t){var n=$e.get(e);n&&n.slice().map((function(e){e(t)})),(n=$e.get("*"))&&n.slice().map((function(n){n(e,t)}))};var $e;const et=0,tt=1,nt=2,rt=3,at=n.createContext({onHoverChange:_});function ot(e){switch(e){case"opacity":case"background":return!0;default:return!1}}const lt=({children:e,Component:t,onClick:r,onKeyDown:a,activeEffectDelay:o=600,stopPropagation:l=!1,getRootRef:i,hasHover:s=!0,hoverMode:u="background",hasActive:c=!0,activeMode:d="background",focusVisibleMode:f="inside",onEnter:p,onLeave:m,className:h,...v})=>{t=t||(v.href?"a":"div");const{onHoverChange:g}=n.useContext(at),y=n.useContext(Xe),b=xe(),{focusVisible:w,onBlur:E,onFocus:k}=function(){const[e,t]=(0,n.useState)(!1),{keyboardInput:r}=(0,n.useContext)(me);return{focusVisible:r&&e,onFocus:(0,n.useCallback)((e=>{e.stopPropagation(),t(!0)}),[t]),onBlur:(0,n.useCallback)((e=>{e.stopPropagation(),t(!1)}),[t])}}(),{sizeX:S="none"}=B(),x=Le(),T=function(e=!0){const{hasHover:t}=n.useContext(V),r=void 0===t?D:t;if(Ae(!e))return r}(),[P,M]=n.useState([]),[N,O]=n.useState(!1),{value:A,setTrue:L,setFalse:R}=((e=!1)=>{const[t,r]=n.useState(e),a=n.useCallback((()=>{r(!0)}),[]),o=n.useCallback((()=>{r(!1)}),[]),l=n.useCallback((()=>{r(!t)}),[t]);return{value:t,setTrue:a,setFalse:o,toggle:l}})(!1),I=A&&!v.disabled,z=c&&!N&&!v.disabled,j=T&&s&&!N,W="a"!==t&&"button"!==t&&"label"!==t&&!v.contentEditable,F=ot(u),H=ot(d),U=["inside","outside"].includes(f),[G,{start:Y,stop:X,delayStart:Q}]=function(e,t){const r=n.useMemo((()=>Math.round(1e8*Math.random()).toString(16)),[]),[a,o]=n.useState(et),l=()=>o(et),i=()=>e&&o(nt),s=Be(i,70),u=Be(l,t);return $((()=>a===tt?(s.set(),s.clear):a===rt?u.clear:(a===nt&&Ze("active",r),_)),[a]),$((()=>{if(a===et)return _;const e=e=>{e!==r&&l()};return qe("active",e),()=>Je("active",e)}),[a===et]),$((()=>{!e&&l()}),[e]),[a,{delayStart:()=>{e&&o(tt)},start:i,stop:e=>{if(e)return o(rt),u.set(e);l()}}]}(z,o),q=G===nt||G===rt,J=Ve(i),Z=n.useRef({onHoverChange:O}).current;$((()=>I?(g(!0),()=>g(!1)):_),[I]);const ee=b===K.ANDROID&&!x&&z&&"background"===d,te=Be((()=>M([])),225),re=C(h,"qa3HpvPrE06uhXoQTn9w","vkuiInternalTappable",b===K.IOS&&"E1rKoVKW5SxIiuow7Zr6",S!==fe.REGULAR&&Qe[S],j&&"QFtuAjNWTYKCxslCUrVB",z&&"p2t4492XJ4KB_Fn5LOx1",j&&I&&!F&&u,z&&q&&!H&&d,w&&!U&&f,j&&I&&F&&{background:"Vml89MGujBfq1oLrfcW6",opacity:"GfqaFNdj4x4ILVHNm7rp"}[u],z&&q&&H&&{background:"_2vCgFljUhUyAhytKmrlM",opacity:"WTIvY5zVp2MO1rfG1rQj"}[d],w&&"ji8Hcx_d8OquZE6M1cJr"),oe={onStart:je((function({originalEvent:e}){if(z){if(e.touches&&e.touches.length>1)return X();if(ee){const{top:t,left:n}=function(e){const t=e?.getBoundingClientRect();return{top:t?.top,left:t?.left,width:e?.offsetWidth,height:e?.offsetHeight}}(J.current);!function(e,t){const n=Date.now(),r=P.filter((e=>e.id+225>n));M([...r,{x:e,y:t,id:n}]),te.set()}(We(e)-(n??0),Fe(e)-(t??0))}Q()}}),v.onStart),onMove:je((function({isSlide:e}){e&&X()}),v.onMove),onEnd:je((function({duration:e}){if(G===et)return;G===tt&&Y();const t=e-70;X(t>=100?0:o-t)}),v.onEnd),onClick:r,onKeyDown:je((function(e){W&&function(e){const t=e.target,{tagName:n}=t,r=t.getAttribute("role"),a=!0!==t.isContentEditable&&"INPUT"!==n&&"TEXTAREA"!==n&&("button"===r||"link"===r),o="A"===n&&t.hasAttribute("href"),l=ae(e);return a&&(l===ne.SPACE&&"button"===r||l===ne.ENTER&&!o)}(e)&&(e.preventDefault(),J.current?.click())}),a)},le=v.href?"link":"button";return n.createElement(Ye,{onEnter:je(L,p),onLeave:je(R,m),type:"button"===t?"button":void 0,tabIndex:W&&!v.disabled?0:void 0,role:W?le:void 0,"aria-disabled":W?v.disabled:void 0,stopPropagation:l&&!y&&!v.disabled,...v,slideThreshold:20,usePointerHover:!0,className:re,Component:t,getRootRef:J,onBlur:je(E,v.onBlur),onFocus:je(k,v.onFocus),...v.disabled?{}:oe},n.createElement(at.Provider,{value:Z},e),ee&&n.createElement("span",{"aria-hidden":!0,className:"cRfdmRFtsrnPFed1QwVp"},P.map((e=>n.createElement("span",{key:e.id,className:"rOXXnhskvZxsMXuwJRiL",style:{top:e.y,left:e.x}})))),(j&&"background"===u||z&&"background"===d)&&n.createElement("span",{"aria-hidden":!0,className:"OFlceGpq4xlVl12RAfwF"}),!v.disabled&&U&&n.createElement(Ge,{visible:w,mode:f}))},it={none:"Nxne7f5OhfJm4O0myJ0p",[fe.REGULAR]:"xgIisaejh9TxTPOWo2tN"},st=({size:e="s",mode:t="primary",appearance:r="accent",stretched:a=!1,align:o="center",children:l,before:i,after:s,getRootRef:u,loading:c,onClick:d,stopPropagation:f=!0,className:p,...m})=>{const h=Boolean(i||s),v=!l&&Boolean(s)!==Boolean(i),{sizeY:g="none"}=B(),y=xe();return n.createElement(lt,{hoverMode:"b4xZSKgz0TaWma4uq5zw",activeMode:"GWqT11ozlIoYPMbNhzP9",Component:m.href?"a":"button",focusVisibleMode:"outside",...m,onClick:c?void 0:d,stopPropagation:f,className:C(p,"yk5QUe037muVK1ojvO0q",{s:"VnVV9qMR5BLpe01eXI7I",m:"uSjTTqOFlGFpcO2Q9_Ll",l:"KFJ4gjVqOeTeO0FmGqd3"}[e],{primary:"XbXnunAK8GXHNUOmjpLq",secondary:"Ag9k1soDpsUIp15FavDi",tertiary:"nFeo_Rtinb6uE7KVE8sA",outline:"es9ij1W6FZhz7AW2T62W",link:"GJJP5kR4quQhyjDJTimB"}[t],{accent:"cpTP7ZIeUh2OVmfGzjCC",positive:"RJfp4XBFOEVkPRM7Cvzc",negative:"__zgOCbUpJyQ7ddK16An",neutral:"NQ3TSod6NNAfNcdrPC7o",overlay:"qWDHlTZB1Hj_dyLToJwa","accent-invariable":"GbUgIA5FJH91aLSGViJo"}[r],{left:"fYLfsdxVEImH8kM0CmV2",center:"grGMp_0SGYcvonNaVKFw",right:"SLa6OjXymL3H1L5OQuis"}[o],g!==fe.COMPACT&&it[g],y===K.IOS&&"EXcULogw7NQZBxIC9hOu",a&&"ttgyeUpk6wPCncL7OHMo",h&&"fTDkzY2tw4DZUWRKXPnI",v&&!a&&"PwmpccrK8RcgtpJ0EhIJ",c&&"eDKZjlPZd4pkEoxa4CMD"),getRootRef:u},c&&n.createElement(Oe,{size:"small",className:"BuTMTg5NGYYcnV0ZLxrn"}),n.createElement("span",{className:"GoeBIjevCqhK85J0IEBw"},T(i)&&n.createElement("span",{className:"i0ussLmE8Nldw5IO1ro6",role:"presentation","data-testid":void 0},i),T(l)&&n.createElement("span",{className:"UJ7J3qVH2qC3L6lnx6I4","data-testid":void 0},l),T(s)&&n.createElement("span",{className:"DlgaJShsXg4zVC4CbQvi",role:"presentation","data-testid":void 0},s)))};function ut(e){const t=n.useRef();return n.useEffect((()=>{t.current=e})),t.current}const ct=Boolean(N&&window.__isVkuiTesting),dt={supported:!1},ft={supported:!1,name:null};N&&!ct&&(("undefined"!=typeof AnimationEvent||"undefined"!=typeof WebKitAnimationEvent)&&(dt.supported=!0),"undefined"!=typeof TransitionEvent?(ft.supported=!0,ft.name="transitionend"):"undefined"!=typeof WebKitTransitionEvent&&(ft.supported=!0,ft.name="webkitTransitionEnd"));const pt=()=>{const e=n.useRef(null),{document:t}=le(),r=n.useRef(_),a=n.useCallback((()=>{r.current(),r.current=_}),[]);return{waitTransitionFinish:n.useCallback(((n,o,l)=>{n&&(!t?.hidden&&ft.supported&&ft.name?(a(),n.addEventListener(ft.name,o),r.current=()=>{ft.name&&n.removeEventListener(ft.name,o)}):(e?.current&&clearTimeout(e.current),e.current=setTimeout(o,l)))}),[t,a,e])}};function mt(e,t){return e.nav||e.id}function ht(e){const t=new Set;return(n,r="warn")=>{if(!t.has(n)){t.add(n);const a=`%c[VKUI/${e}] ${n}`,o="log"===r?"color: steelblue; font-style: italic":void 0;console[r](a,o)}}}function vt(e){return`https://dequeuniversity.com/rules/axe/4.5/${e}`}function gt(e){const t=n.useRef(e);var r,a;return r=t.current,a=e,Object.keys(r).length===Object.keys(a).length&&Object.keys(r).every((e=>r[e]===a[e]))||(t.current=e),t.current}vt("button-name"),vt("link-name"),vt("image-alt");const yt=n.createContext({entering:!1}),bt=({children:e,entering:t})=>{const r=gt({entering:n.useContext(yt).entering||t});return n.createElement(yt.Provider,{value:r},e)},wt=n.createContext({colRef:null,animate:!0}),Et={View:"hdhobSUKDs0wr7L5kDg8","View--animated":"rsXBkDunaMa6yoeWJ9v0","View--swiping-back":"YG2PXgCOMo1mwxLHg8ay",View__panel:"Fm6_QlXM_ASolBax_CJO",View__header:"BcINXMN2a8ogWwpZJdCJ",View__panels:"tqX1uOvaZBo6OHrqmWRk","View__panel-in":"n5Z4Y0FE6_i3ROreUXhd","View__panel--next":"sqBotXflXH79OSpOqbjP","View__panel--prev":"wIPhFVG3nbCDsLrLsXym","vkui-animation-view-prev-back":"taIoMVzJuS9zyFnwdnfT","vkui-animation-view-next-forward":"Z5Sg95vuH1_9ARcfYD8P","View--no-motion":"driDP7P3ErCg1ZyaWmNE","View--ios":"_82xxe06yTGcLgrspg2vQ","View__panel--swipe-back-prev":"FXiQ61YrpYpRgSrQworU","View__panel--swipe-back-success":"PkdotdtPhK2FHZzYSM5x","View__panel--swipe-back-next":"UHytEuFAI5vGPL8C_0hp","View__panel--swipe-back-failed":"QqIzDjEojZLGwdI0_G2L","vkui-animation-ios-prev-forward":"iDktvfFIymT01teX9ZB6","vkui-animation-ios-next-back":"_YHc7NTrtqUu73B11OAT","vkui-animation-ios-next-forward":"rZav2iWUiyQKIQhxMLav","vkui-animation-ios-prev-back":"okXDj97g_fJto7lzmqbl","vkui-animation-ios-fade-in":"uiEJz0sfp8Z79k6udr67","vkui-animation-ios-fade-out":"YEcnvfviTsWjbMURsOzW","View__panel--active":"nex3RCBfgJLw6zU753vQ"};var kt;!function(e){e[e.fail=1]="fail",e[e.success=2]="success"}(kt||(kt={}));let St={};ht("View");const Ct=({activePanel:e,history:t,nav:r,onTransition:a,onSwipeBack:o,onSwipeBackStart:l,onSwipeBackCancel:i,children:s,className:u,...c})=>{const d=n.useRef(St[mt({nav:r,id:c.id})]||{}),f=n.useRef(_);n.useEffect((()=>()=>{const e=mt({nav:r,id:c.id});e&&(St[e]=d.current)}));const p=n.useRef({}),{window:m,document:h}=le(),v=be(),g=J(),y=n.useContext(wt),b=xe(),[w,E]=n.useState(!1),[k,S]=n.useState([e]),[x,T]=n.useState(e),[P,M]=n.useState(void 0),[O,A]=n.useState(null),[L,R]=n.useState(null),[I,z]=n.useState(!1),[D,V]=n.useState(!1),[B,j]=n.useState(0),[W,F]=n.useState(0),[H,U]=n.useState(null),[G,Y]=n.useState(null),[X,Q]=n.useState(null),[q,Z]=n.useState(!1),ee=ut(e),te=ut(I),ne=ut(q),re=ut(X),ae=ut(G),oe=ut(a),se=n.Children.toArray(s).filter((e=>{const t=mt(e.props);return void 0!==t&&k.includes(t)||t===G||t===H})),ue=!1===g?.transitionMotionEnabled||!y?.animate||b===K.VKCOM,ce=e=>null===e?null:p.current[e],de=n.useCallback(((t,n)=>{n&&(d.current[t]=0),A(null),R(null),S([e]),T(e),E(!1),M(void 0),f.current=()=>{v?.scrollTo(0,n?d.current[e]:0),a&&a({isBack:n,from:t,to:e})}}),[e,a,v]);$((()=>{f.current(),f.current=_}),[f.current]);const fe=n.useCallback((e=>{e&&![Et["vkui-animation-ios-next-forward"],Et["vkui-animation-ios-prev-back"],Et["vkui-animation-view-next-forward"],Et["vkui-animation-view-prev-back"]].includes(e.animationName)||null===O||de(O,Boolean(P))}),[de,P,O]),{waitTransitionFinish:pe}=pt(),me=Be(fe,b===K.IOS?600:300),he=n.useCallback((()=>{o&&o()}),[o]),ve=n.useCallback((()=>{i&&i(),Y(null),U(null),z(!1),Q(null),j(0),F(0)}),[i]),ge=n.useCallback((e=>{if(!e||e?.propertyName.includes("transform")&&e?.target===ce(H))switch(X){case kt.fail:ve();break;case kt.success:he()}}),[ve,he,H,X]),ye=n.useCallback((e=>{if(I){const t=W/e.duration*1e3;0===W?ve():W>=(m.innerWidth??0)?he():t>250||B+W>m.innerWidth/2?Q(kt.success):Q(kt.fail)}D&&V(!1)}),[ve,he,W,B,I,D,m]),we=e=>{if(!N||!m)return{};const t=e===G,n=e===H;if(!t&&!n||X)return{};let r=`${W}px`,a=100*W/m.innerWidth/2-50+"%",o=.3*(m.innerWidth-W)/m.innerWidth;return X?t?{boxShadow:`-2px 0 12px rgba(0, 0, 0, ${o})`}:{}:n?{transform:`translate3d(${a}, 0, 0)`,WebkitTransform:`translate3d(${a}, 0, 0)`}:t?{transform:`translate3d(${r}, 0, 0)`,WebkitTransform:`translate3d(${r}, 0, 0)`,boxShadow:`-2px 0 12px rgba(0, 0, 0, ${o})`}:{}};return n.useEffect((()=>{if(ee&&ee!==e&&!te&&!ne){const t=n.Children.toArray(s).map((e=>mt(e.props))).find((t=>t===ee||t===e)),r=t===e;d.current[ee]=v?.getScroll().y,ue?de(ee,r):(ie(h),S([ee,e]),A(ee),R(e),T(null),E(!0),M(r),dt.supported||me.set())}if(ee&&ee!==e&&te){const t=e,n=ee;ae&&(d.current[ae]=0),Y(null),U(null),z(!1),Q(null),j(0),F(0),T(t),S([t]),f.current=()=>{null!==t&&v?.scrollTo(0,d.current[t]),oe&&oe({isBack:!0,from:n,to:t})}}!re&&X&&pe(ce(H),ge,b===K.IOS?600:300),re!==kt.fail||X||null===x||v?.scrollTo(0,d.current[x]),ee!==e&&q&&(Z(!1),R(null),A(null),E(!1),S([e]),T(e))}),[e,x,me,q,s,ue,h,de,l,se,b,ee,ne,oe,ae,re,te,v,H,X,I,ge,pe]),n.createElement(Ye,{Component:"section",...c,className:C(Et.View,b===K.IOS&&C(Et["View--ios"],"vkuiInternalView--ios"),!ue&&w&&Et["View--animated"],!ue&&I&&Et["View--swiping-back"],ue&&Et["View--no-motion"],u),onMoveX:e=>{if(!(b!==K.IOS||D||function(e){const t=e.originalEvent.target;return Boolean(t?.closest?.("input, textarea, [data-vkui-swipe-back=false]"))}(e)||ue))if(g?.isWebView){if(o&&!(w&&e.startX<=70)){if(!I&&e.startX<=70&&t&&t.length>1){if(l&&"prevent"===l(x))return void V(!0);null!==x&&(ie(h),d.current[x]=v?.getScroll().y),z(!0),j(e.startX),Y(x),U(t.slice(-2)[0])}if(I){let t=0;t=e.shiftX<0?0:e.shiftX>m.innerWidth-B?m.innerWidth:e.shiftX,F(t)}}}else(e.startX<=70||e.startX>=m.innerWidth-70)&&!q&&Z(!0)},onEnd:ye},n.createElement("div",{className:Et.View__panels},se.map((e=>{const t=mt(e.props),r=w&&t===(P?O:L),a=t===O||t===G||t===H||t===L&&P;return n.createElement("div",{className:C(Et.View__panel,t===x&&Et["View__panel--active"],t===O&&Et["View__panel--prev"],t===L&&Et["View__panel--next"],t===G&&Et["View__panel--swipe-back-prev"],t===H&&Et["View__panel--swipe-back-next"],X===kt.success&&Et["View__panel--swipe-back-success"],X===kt.fail&&Et["View__panel--swipe-back-failed"]),onAnimationEnd:r?fe:void 0,ref:e=>void 0!==t&&(p.current[t]=e),style:we(t),key:t},n.createElement("div",{className:Et["View__panel-in"],style:{marginTop:a?-(d.current[t]??0):void 0}},n.createElement(bt,{entering:t===L||t===H},e)))}))))},_t=n.forwardRef((function({fixed:e=!1,...t},r){return t["data-tooltip-container"]=e?"fixed":"true",n.createElement("div",{...t,ref:r})})),xt={none:"nYNG13aGD8J8hR7nwiyy",[fe.COMPACT]:"gP3jluOGJqlCkvlppP9r",[fe.REGULAR]:"nE1cq3iY9HjawgTT8d6A"},Tt=({centered:e=!1,children:t,getRootRef:r,nav:a,className:o,...l})=>{const i=xe(),{sizeX:s="none"}=B();return n.createElement("div",{...l,ref:r,className:C("lAgicHGpWbH7z32mAHRL",xt[s],e&&"vkuiInternalPanel--centered",o)},n.createElement(Ye,{Component:_t,className:C("Tn9MmKAcEbPy66kaYsup","vkuiInternalPanel__in")},i===K.IOS&&n.createElement("div",{className:"vkuiInternalPanel__fade"}),n.createElement("div",{className:"AErbL2gkzEXf1wjfvFKu"}),e?n.createElement("div",{className:"cN6WUm2jT4HZnNByw_Qu"},t):t,n.createElement("div",{className:"GXlgK5dGOylBO_1dT6xm"})))},Pt=({className:e,weight:t,Component:r="span",normalize:a,getRootRef:o,...l})=>n.createElement(r,{...l,ref:o,className:C(e,a&&"vH74WGdN_BCpWf_7i17V",t&&{1:"oYcJS9d_kGUGJpphHHA6",2:"WQ9TVFpu3JClHFrkGltU",3:"EIxc5VT2juyqeSb7nWiW"}[t])}),Mt={none:"Nm6uhcHULWoVrWXFa4DX",[fe.COMPACT]:"YY1PvVElEQ6PVI8EmRUg"},Nt=({className:e,Component:t="span",normalize:r=!0,...a})=>{const{sizeY:o="none"}=B();return n.createElement(Pt,{Component:t,normalize:r,className:C(e,"m67OvpPi9uLWlM8ESWGH",o!==fe.REGULAR&&Mt[o]),...a})},Ot=({className:e,level:t="1",Component:r,normalize:a=!0,...o})=>(r||(r="h"+t),n.createElement(Pt,{Component:r,normalize:a,className:C(e,{1:"LGEd06KKbpfdDcqRkdmw",2:"P6D2TKBGyCU1KD19k6FS",3:"iAax16GvorN4aJk1jN_a"}[t]),...o})),At={ios:"c32jVYVbew2uRIQkkNhj",android:"Xw2ujfqTdcbRK2Pd1erD",vkcom:"EZFtVJOoYeRlidQVsG6d"},Lt=({primary:e,children:t})=>{const r=xe();return r===K.IOS?n.createElement(Ot,{Component:"span",level:"3",weight:e?"1":"3"},t):n.createElement(Nt,{weight:r===K.VKCOM?void 0:"2"},t)},Rt=(ht("PanelHeaderButton"),({children:e,primary:t=!1,label:r,className:a,...o})=>{const l=P(e),i=P(r),s=xe();let u,c;switch(s){case K.IOS:u="background",c="opacity";break;case K.VKCOM:u="AVZPPV5f7wBvyRWdh0QP",c="zTnS00Arihh6PvMhXlA1";break;default:u="background",c="background"}return n.createElement(lt,{Component:o.href?"a":"button",...o,hoverMode:u,activeEffectDelay:200,activeMode:c,className:C("vkuiInternalPanelHeaderButton","daY3W8TyjjskuDKuyBjz",At.hasOwnProperty(s)?At[s]:At.android,l&&"SGmkFk1sWP1eBmzdJ53e",!l&&!i&&"NX_CiS8DLmwows42OGuv",a)},l?n.createElement(Lt,{primary:t},e):e,i?n.createElement(Lt,{primary:t,className:"WfPuhEHfVmiBXR9RyCdY"},r):r)}),It={mq:{className:"I7CextrSkr29NdLwzFEr"},[fe.COMPACT]:{className:"B9vkcryYtKw1wkpyQLw6"}},zt={mq:{className:"N8oDw3wU_dn14soExvaW"},[fe.REGULAR]:{className:"wwINQ_p1tDrPyvddFrqh"}},Dt={mq:{className:"KoNP9Dhgb4ZE_KCRG_xS"},[fe.COMPACT]:{className:"n6S8NfRkB0bW3vkniASK"}},Vt={mq:{className:"hNZYoYaKqlm1gxBD5Mn1"},[fe.REGULAR]:{className:"jqZkh4qdd9q1AzISUlHY"}},Bt={tabletMinus:{mq:{className:"bntr2dwVNAPcrKKSu3es"},forced:{className:"pkz611p5o6jDts81lvC0"}},tabletPlus:{mq:{className:"imPDNdvl54HnVrYL5R7D"},forced:{className:"ukJvWNxHN449GVW5d7Cf"}}},jt={mobile:{mq:{className:"fnI9hbI2H8BEJSJJu1O4"},forced:{className:"nRJB4eX_p54hBQPv9SwN"}},desktop:{mq:{className:"NE1wtDcnk22WbbGUIi9V"},forced:{className:"hfYSkf6d44JPLDPUUGzK"}}};function Wt(e){return e.desktopPlus.matches?ce.DESKTOP:e.tablet.matches?ce.TABLET:e.smallTablet.matches?ce.SMALL_TABLET:e.mobile.matches?ce.MOBILE:ce.SMALL_MOBILE}function Ft(e){return e.mediumHeight.matches?de.MEDIUM:e.mobileLandscapeHeight.matches?de.SMALL:de.EXTRA_SMALL}function Ht(e,t,n,r){const a=r===K.VKCOM;if((void 0===e||void 0===n)&&(void 0===e||void 0===t)||void 0===n&&void 0===t)return!!a||null;const o=e>=ce.SMALL_TABLET,l=n||void 0!==t&&t>=de.MEDIUM;return o&&l||a}function Ut(e,t="none"){if("none"===t)return e.hasOwnProperty("none")?e.none:null;const n=[],r=pe[t];return e.hasOwnProperty(r)&&n.push(e[r]),t>=ce.MOBILE&&e.hasOwnProperty("mobilePlus")&&n.push(e.mobilePlus),t>=ce.SMALL_TABLET?e.hasOwnProperty("smallTabletPlus")&&n.push(e.smallTabletPlus):e.hasOwnProperty("smallTabletMinus")&&n.push(e.smallTabletMinus),t>=ce.TABLET?e.hasOwnProperty("tabletPlus")&&n.push(e.tabletPlus):e.hasOwnProperty("tabletMinus")&&n.push(e.tabletMinus),n.length>0?n.join(" "):null}const Kt=(e,t,n)=>({compact:void 0===e?t.mq:e===fe.COMPACT&&t[e],regular:void 0===e?n.mq:e===fe.REGULAR&&n[e]}),Gt=({children:e,style:t,vertical:r,getRootRef:a,getRef:o,filled:l,className:i,...s})=>{const u=xe(),c=Ve(a,o),[d,f]=n.useState(void 0),{window:p}=le(),{colRef:m}=n.useContext(wt),h=()=>{if(m?.current){const e=getComputedStyle(m.current);f(m.current.clientWidth-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)+"px")}else f(void 0)};return n.useEffect(h,[m,u]),ue(p,"resize",h),n.createElement(_t,{...s,fixed:!0,ref:c,className:C("yA4SjaQ8ciKQqz_z5IKW",u===K.IOS&&"vkuiInternalFixedLayout--ios",l&&"OeSxmJrQqOXv1OQQFteW",r&&{top:"zpqPxYv9rTfpB8jvPwMH",bottom:C("hzA3wRGTg92iZMqYA0qd","vkuiInternalFixedLayout--vertical-bottom")}[r],i),style:{...t,width:d}},e)},Yt=n.createContext({updateModalHeight:()=>{},registerModal:()=>{},isInsideModal:!1}),Xt=({wide:e,className:t,...r})=>n.createElement("div",{...r,className:C("KjMLlutbGzC7L_AymWru",!e&&"ZPoK0WZXfugMgydijDST",t)},n.createElement("hr",{className:"nhoIJUovN5v9rttt5JMW"})),Qt=({size:e=8,style:t,className:r,...a})=>{const o={height:e,padding:e/2+"px 0",...t};return n.createElement("div",{...a,className:C(r,"Uyl0dFDNdJTAms6OZAiP"),style:o})},qt={ios:C("FaoBD1wTEzEMsYwouWgl","vkuiInternalPanelHeader--ios"),android:C("X1Fi2G6bH6q0jDoQaefv","vkuiInternalPanelHeader--android"),vkcom:C("vcLduqhlKqpe7VViQ88G","vkuiInternalPanelHeader--vkcom")},Jt={none:"KgltWNakC4tpBmfu4Diw",regular:"kJy1W5lky5eVpX_16bui"},Zt=({children:e,Component:t="span",id:r})=>xe()===K.VKCOM?n.createElement(Nt,{weight:"2",Component:t,id:r},e):n.createElement(t,{className:"r34IkOM3CyAuFHzprFzi",id:r},e);Zt.displayName="PanelHeaderContent";const $t=({before:e,after:t,separator:r,children:a})=>{const{webviewType:o}=J(),{isInsideModal:l}=n.useContext(Yt),i=xe();return n.createElement(n.Fragment,null,n.createElement(_t,{fixed:!0,className:"Va5Y_2SZWMZTRvdbiYYV"},n.createElement("div",{className:C("NAzkwk5HYSDs9cuY4eZ2","vkuiInternalPanelHeader__before")},e),n.createElement("div",{className:"vINzTqKqrgpUse3J1Sjw"},n.isValidElement(a)&&a.type.displayName===Zt.displayName?a:n.createElement(Zt,null,a)),n.createElement("div",{className:C("HZ9_U_qGL0Q5yYy0IthA","vkuiInternalPanelHeader__after")},(o===X.INTERNAL||l)&&t)),r&&i===K.VKCOM&&n.createElement(Xt,{className:"BbEssdhSssi5W0846sKz",wide:!0}))},en=({before:e,children:t,after:r,separator:a=!0,visor:o=!0,transparent:l=!1,shadow:i,getRef:s,getRootRef:u,fixed:c,className:d,...f})=>{const p=xe(),{webviewType:m}=J(),{isInsideModal:h}=n.useContext(Yt),{sizeX:v="none"}=B(),{sizeX:g}=(()=>{const{sizeX:e,sizeY:t,viewWidth:r,viewHeight:a,hasPointer:o}=n.useContext(V),l=xe();return n.useMemo((()=>{const n=Kt(e,It,zt),i=Kt(t,Dt,Vt),s=((e,t)=>({tabletMinus:void 0===e?t.tabletMinus.mq:e<ce.TABLET&&t.tabletMinus.forced,tabletPlus:void 0===e?t.tabletPlus.mq:e>=ce.TABLET&&t.tabletPlus.forced}))(r,Bt),u=((e,t,n,r,a)=>{const o=Ht(e,t,n,r);return null===o?{mobile:a.mobile.mq,desktop:a.desktop.mq}:o?{mobile:!1,desktop:a.desktop.forced}:{mobile:a.mobile.forced,desktop:!1}})(r,a,o,l,jt);return{sizeX:n,sizeY:i,viewWidth:s,deviceType:u}}),[e,t,r,a,o,l])})();let y=void 0!==c?c:p!==K.VKCOM;return n.createElement("div",{...f,className:C("wRLEw8g9VMv9bmTI7Fpo","vkuiInternalPanelHeader",qt.hasOwnProperty(p)?qt[p]:qt.android,l&&"GKsk2pMEnDGAq1MiHOtH",i&&"S586Pi0HVkWBa2V7G8DM",o&&C("i8JIDaaVnJLLh2c8nPAq","vkuiInternalPanelHeader--vis"),a&&o&&C("VQbd_zKmdLOm9FoEi3Mm","vkuiInternalPanelHeader--sep"),m===X.VKAPPS&&!h&&"XTqLUS2k1u16qml2h9Od",!e&&"KWJgkHy8fOx4kWBsMKLT",!r&&"aHBbOcxkSfjdPydPoRDw",y&&"y_Ic_IbvPa6llYaxcRli",v!==fe.COMPACT&&Jt[v],d),ref:y?u:s},y?n.createElement(Gt,{className:C("WCpB_r_n68CM4y2h2Tgp","vkuiInternalPanelHeader__fixed"),vertical:"top",getRootRef:s},n.createElement($t,{before:e,after:r,separator:a},t)):n.createElement($t,{before:e,after:r,separator:a},t),a&&o&&p!==K.VKCOM&&n.createElement(n.Fragment,null,g.compact&&n.createElement(Xt,{className:g.compact.className}),g.regular&&n.createElement(Qt,{className:g.regular.className,size:16})))};function tn(e,t){return e??t}function nn(e,t){e.addEventListener?e.addEventListener("change",t):e.addListener(t)}function rn(e,t){e.removeEventListener?e.removeEventListener("change",t):e.removeListener(t)}en.Content=Zt;var an=a(786);const on={window:void 0,mediaQueries:null},ln=()=>{const{window:e}=le();return n.useMemo((function(){if(on.window===e&&null!==on.mediaQueries)return on.mediaQueries;const t=e?e.matchMedia.bind(e):U;return on.window=e,on.mediaQueries={desktopPlus:t(an.MEDIA_QUERIES.DESKTOP_PLUS),smallTabletPlus:t(an.MEDIA_QUERIES.SMALL_TABLET_PLUS),tablet:t(an.MEDIA_QUERIES.TABLET),smallTablet:t(an.MEDIA_QUERIES.SMALL_TABLET),mobile:t(an.MEDIA_QUERIES.MOBILE),mediumHeight:t(an.MEDIA_QUERIES.MEDIUM_HEIGHT),mobileLandscapeHeight:t(an.MEDIA_QUERIES.MOBILE_LANDSCAPE_HEIGHT)},on.mediaQueries}),[e])},sn=()=>{N||console.error("[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\n\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\n\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.");const{viewWidth:e,viewHeight:t,sizeX:r,sizeY:a,hasPointer:o,hasHover:l}=n.useContext(V),i=xe(),s=ln(),[[u,c],d]=n.useState((()=>[tn(e,Wt(s)),tn(t,Ft(s))])),f=n.useMemo((()=>{const n=tn(o,z),s=tn(l,D),d=tn(e,u),f=tn(t,c),p=tn(r,function(e){return e<=ce.MOBILE?fe.COMPACT:fe.REGULAR}(d)),m=tn(a,function(e,t,n){return e>=ce.SMALL_TABLET&&n||t<=de.EXTRA_SMALL?fe.COMPACT:fe.REGULAR}(d,f,n));return{viewWidth:d,viewHeight:f,sizeX:p,sizeY:m,hasPointer:n,hasHover:s,isDesktop:Ht(d,f,n,i)}}),[u,c,e,t,r,a,o,l,i]);return n.useEffect((()=>{const n=()=>{d((n=>{const r=tn(e,Wt(s)),a=tn(t,Ft(s)),[o,l]=n;return o!==r||l!==a?[r,a]:n}))};return e||[s.desktopPlus,s.tablet,s.smallTablet,s.mobile].forEach((e=>nn(e,n))),t||[s.mediumHeight,s.mobileLandscapeHeight].forEach((e=>nn(e,n))),()=>{[s.desktopPlus,s.tablet,s.smallTablet,s.mobile,s.mediumHeight,s.mobileLandscapeHeight].forEach((e=>rn(e,n)))}}),[s,e,t]),f},un=(e,t)=>{let n;switch(e){case K.ANDROID:n="vkBase";break;case K.IOS:n="vkIOS";break;case K.VKCOM:n="vkCom";break;default:n=e}return`vkui--${n}--${t}`},cn=({children:e,platform:t,appearance:r})=>n.createElement(n.Fragment,null,n.Children.map(e,(e=>n.isValidElement(e)?n.cloneElement(e,{className:C(e.props.className,un(t,r))}):e)));function dn({children:e,...t}){const r=gt({...J(),...t});return n.createElement(Q.Provider,{value:r},e)}const fn=({appearance:e,children:t})=>{const r=xe();return n.createElement(dn,{appearance:e},n.createElement(cn,{platform:r,appearance:e},t))},pn=({children:e,className:r,forcePortal:a})=>{const{portalRoot:o,mode:l,disablePortal:i}=n.useContext(me),s=Z();return Ae()?!i&&o&&(a??"full"!==l)?(0,t.createPortal)(n.createElement(fn,{appearance:s},n.createElement("div",{className:r},e)),o):n.createElement(n.Fragment,null,e):null},mn=({children:e})=>{const{isDesktop:t}=sn();return n.createElement("div",{className:C("tO1RHhyxIXpebIydW335",t&&"oZejS7AIxKrS6ugOl8QQ")},e)},hn=({children:e})=>n.createElement("div",{className:"fLiNmF4UshAzGtYcxfl5"},e),vn=({popout:e,modal:t,children:r,getRootRef:a,className:o,...l})=>{const{document:i}=le();return n.useEffect((()=>{e&&ie(i)}),[i,e]),n.createElement("div",{...l,className:C("WPeUc5YnywLHibWugN8e",o),ref:a},r,n.createElement(pn,null,!!e&&n.createElement(mn,null,e),!!t&&n.createElement(hn,null,t)))},gn=({popout:e,modal:t,header:r,children:a,getRootRef:o,getRef:l,className:i,...s})=>{const u=xe();return n.createElement(vn,{className:C("rIAwmU7wFjGfe0A0seOd",u===K.IOS&&"LC1ootJWz8qAiuyYP2V3"),popout:e,modal:t,getRootRef:o},r,n.createElement("div",{...s,ref:l,className:C("BUF6XBoaONuRs67g3jG2",!!r&&"ETnFuNYwWYDkUmKipiPL",i)},a))},yn={none:C("fayQlWfPyfOtD7_PITCO","vkuiInternalSplitCol--viewWidth-none"),tabletMinus:"IcyEaVmKPExhKWbkuYx3",smallTabletPlus:"J5fSCECo8jevyzcejz7h",tabletPlus:"vkuiInternalSplitCol--viewWidth-tabletPlus"};ht("SplitCol");const bn=e=>{const{children:t,width:r,maxWidth:a,minWidth:o,spaced:l,animate:i,fixed:s,style:u,autoSpaced:c,stretchedOnMobile:d,className:f,...p}=e,m=n.useRef(null),{viewWidth:h}=B(),v=function(e){const{viewWidth:t}=B(),[r,a]=n.useState(Boolean(e)),o=ln();return n.useEffect((()=>{if(void 0!==e)return void a(e);if(void 0!==t)return void a(t<ce.TABLET);const n=()=>a(!o.smallTabletPlus.matches);return n(),nn(o.smallTabletPlus,n),()=>{rn(o.smallTabletPlus,n)}}),[e,t,o]),r}(i),g=gt({colRef:m,animate:v});return n.createElement("div",{...p,style:{...u,width:r,maxWidth:a,minWidth:o},ref:m,className:C("DWjR67BjJ6H9Z1ZZzbnL",Ut(yn,h),l&&C("rG2qeW5aPFr9NjMTSHKC","vkuiInternalSplitCol--spaced"),void 0===l&&C("FxlxjG3Izif7ir1RvjNa","vkuiInternalSplitCol--spaced-none"),c&&C("qCM2RsOTHYDMlTLbXKa_","vkuiInternalSplitCol--spaced-auto"),s&&"IHtR0BDRKT59794_Rwun",d&&"nRtnHUOxrPA3vrY3pByJ",f)},n.createElement(wt.Provider,{value:g},s?n.createElement("div",{className:"v47uek5tRLkQxV4__v82"},t):t))},wn=({children:e,initialScroll:t,saveScroll:r})=>{const{getScroll:a,scrollTo:o}=n.useContext(ye);return $((()=>("number"==typeof t&&o(0,t),()=>r(a().y))),[]),n.createElement(n.Fragment,null,e)},En=(ht("Epic"),e=>{const t=n.useRef({}).current,{activeStory:r,tabbar:a,children:o,className:l,...i}=e,s=n.Children.toArray(o).find((e=>n.isValidElement(e)&&mt(e.props)===r))??null;return n.createElement("div",{...i,className:C("ox3pTZEisQUmVRW1SQw3",a&&"vkuiInternalEpic--hasTabbar",l)},n.createElement(wn,{key:r,initialScroll:t[r]||0,saveScroll:e=>t[r]=e},s),a)}),kn=(e,t)=>{switch(e){case"horizontal":return"vkuiInternalTabbar--layout-horizontal";case"vertical":return"vkuiInternalTabbar--layout-vertical";default:return n.Children.count(t)>2?kn("vertical",[]):kn("horizontal",[])}},Sn=({children:e,shadow:t=!0,mode:r,className:a,...o})=>{const l=xe();return n.createElement("div",{className:C("vkuiInternalTabbar","WrbWtcF_X6zdRbtxGlER",l===K.IOS&&"syeamjVNwpRdWOmm9BCn",kn(r,e),t&&"HtcRbbri68bnyno9LN0q",a),...o},e)},Cn=({className:e,caps:t,Component:r="span",normalize:a=!0,...o})=>n.createElement(Pt,{Component:r,normalize:a,className:C(e,"Q1AOD2NHwwvjiaNxdYv3",t&&"cXGIwvWELAEHoI7hitqW"),...o}),_n=(ht("TabbarItem"),({children:e,selected:t,indicator:r,text:a,href:o,Component:l=(o?"a":"button"),disabled:i,className:s,...u})=>{const c=xe();return n.createElement(l,{...u,disabled:i,href:o,className:C("wbKDj782B1CQ4JLE8TG0",c===K.IOS&&"luM3soLYxgbvUG8hmdXS",c===K.ANDROID&&"I1adTPeTDU_8EUIE9qGy",t&&"pQptgCIKsPRMRC3BKOng",!!a&&"slashOTBJviZlj35LrRM",s)},n.createElement(lt,{role:"presentation",Component:"div",disabled:i,activeMode:c===K.IOS?"ior0S0d3JWQVB4G8ntp7":"background",activeEffectDelay:c===K.IOS?0:300,hasHover:!1,className:"jjgh_I0ISrS3BCkibI8V"}),n.createElement("div",{className:"_Qbrl6BzKGTgvLjpbPRL"},n.createElement("div",{className:"yoTqjWkjwpR6KFPfH9sA"},e,n.createElement("div",{className:"vkuiInternalTabbarItem__label"},T(r)&&r)),a&&n.createElement(Cn,{Component:"div",className:"KBismiAlTVRgPkzZCQay",weight:"2"},a)))}),xn=["a[href]","area[href]",'input:not([disabled]):not([hidden]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([hidden]):not([aria-hidden])","textarea:not([disabled])","button:not([disabled])","iframe","audio","video","[contenteditable]",'[tabindex]:not([tabindex="-1"])'].join(),Tn=({Component:e="div",onClose:t,restoreFocus:r=!0,timeout:a=0,getRootRef:o,children:l,...i})=>{const s=Ve(o),{document:u,window:c}=le(),[d,f]=n.useState(null),[p,m]=n.useState(null),{keyboardInput:h}=n.useContext(me),v=Be((()=>{h&&!s.current?.contains(u.activeElement)&&d?.length&&d[0].focus()}),a);$((()=>{v.set()}),[]),$((()=>{if(!s.current)return;const e=[];Array.prototype.forEach.call(s.current.querySelectorAll(xn),(t=>{const{display:n,visibility:r}=c.getComputedStyle(t);"none"!==n&&"hidden"!==r&&e.push(t)})),0===e.length&&e.push(s.current),f(e)}),[l]);const g=Be((()=>{p&&p.focus()}),a);return $((()=>{if(r&&u.activeElement)return m(u.activeElement),()=>{g.set()}}),[r]),ue(u,"keydown",(e=>{if(ae(e)===ne.TAB&&d?.length){const t=d.length-1,n=d.findIndex((t=>t===e.target)),r=-1===n||n===t&&!e.shiftKey;if(r||0===n&&e.shiftKey){e.preventDefault();const n=d[r?0:t];return n!==u.activeElement&&n.focus(),!1}}return t&&ae(e)===ne.ESCAPE&&t(),!0}),{capture:!0}),n.createElement(e,{tabIndex:-1,ref:s,...i},l)},Pn=S("Icon20Cancel","cancel_20","0 0 20 20",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20" id="cancel_20"><path fill="currentColor" fill-rule="evenodd" d="M4.72 4.72a.75.75 0 0 1 1.06 0L10 8.94l4.22-4.22a.75.75 0 1 1 1.06 1.06L11.06 10l4.22 4.22a.75.75 0 1 1-1.06 1.06L10 11.06l-4.22 4.22a.75.75 0 0 1-1.06-1.06L8.94 10 4.72 5.78a.75.75 0 0 1 0-1.06z" clip-rule="evenodd" /></symbol>',20,20,!1,void 0),Mn=({"aria-label":e="Закрыть",className:t,...r})=>n.createElement(lt,{className:C("KEw9XPM7v_APe9rgLm2c",t),...r,"aria-label":e,activeMode:"CdY0EpEt7yXGslAeVtUI",hoverMode:"eOJxlW6_6JMIhXhn0dla"},n.createElement(Pn,null)),Nn=({alignY:e="center",alignX:t="center",closing:r=!1,hasMask:a=!0,fixed:o=!0,children:l,onClick:i,className:s,...u})=>{const c=xe(),[d,f]=n.useState(!a),p=n.useRef(null),m=e=>{e&&"Q2B5ovH_CUZYoQQ7KnHU"!==e.animationName||f(!0)},h=Be(m,c===K.IOS?300:200);n.useEffect((()=>{!d&&h.set()}),[h,d]);const{window:v}=le();return ue(v,"touchmove",(e=>e.preventDefault()),{passive:!1}),n.createElement("div",{...u,className:C("aGte1aQbkIKqBjs8I1wL",{center:"ryWC7w8dxX3_r72Zk_cZ",top:"QAKlTFmmIb7O7KmYwBig",bottom:"OGlUtNYgimO5aZ1xObwx"}[e],{center:"uvXArRIRBywCylBPrt_4",left:"ZfXRwV7l2T5jZIEZx8jJ",right:"yqLvgd0cWWnWFEh7oTSg"}[t],r&&"OeXWAk16bUHew1dE0E0X",d&&"fKK_F63Blr5OmyP1LS1v",o&&"VjO0dY9ozhL25eODxvA6",a&&"t7xtz4On9PO8UwZ3rZpL",s),onAnimationEnd:d?void 0:m,ref:p},n.createElement("div",{className:"x8YyiUptjVEs2TpkW_2Q"},n.createElement("div",{className:"RFtJnpyQxJi6NYSwsFZu",onClick:i}),n.createElement("div",{className:"cc2QVNDws3EgJhQdt7pe"},l)))},On=({className:e,level:t="1",caps:r,Component:a="span",normalize:o=!0,...l})=>n.createElement(Pt,{Component:a,normalize:o,className:C(e,r&&"ylDZvK6ihVM39dwTvVwa",{1:"Wnyxaa8kYslLGlw3E8VL",2:"_RJvk3zKKkWpE6zl5llh",3:"eBmUUnglF8jt8CRkhm3x"}[t]),...l}),An="jDzt7yBRpKGAmv8bTdu2",Ln="wOt8sWsj9QaDeyfUYVJX",Rn=e=>xe()===K.IOS?n.createElement(Ot,{className:An,weight:"1",level:"3",...e}):n.createElement(Ot,{className:An,weight:"2",level:"2",...e}),In=e=>{switch(xe()){case K.VKCOM:return n.createElement(Cn,{className:Ln,...e});case K.IOS:return n.createElement(On,{className:Ln,...e});default:return n.createElement(Nt,{Component:"span",className:Ln,weight:"3",...e})}},zn=({action:e,onItemClick:t,...r})=>{const a=xe(),o=n.useCallback((()=>t(e)),[t,e]);if(a===K.IOS){const{title:t,action:a,autoClose:l,mode:i,...s}=e;return n.createElement(lt,{Component:s.href?"a":"button",className:C("VEvg4bXVENijstUChscK","destructive"===i&&"okpGjy6AFFWvd2UIUURg","cancel"===i&&"u69v4B_ldRVboCRxA6U8"),onClick:o,...s,...r},t)}let l="tertiary";return a===K.VKCOM&&(l="cancel"===e.mode?"secondary":"primary"),n.createElement(st,{className:C("Dv06PqgH_dUk20NKFQJe","cancel"===e.mode&&"hr1KGH47m6XhJfwtmx2l"),mode:l,size:"m",onClick:o,Component:e.Component,href:e.href,target:e.target},e.title)},Dn=({actions:e=[],actionsLayout:t="horizontal",children:r,className:a,style:o,text:l,header:i,onClose:s,dismissLabel:u="Закрыть предупреждение",...c})=>{const d=xe(),{isDesktop:f}=sn(),{waitTransitionFinish:p}=pt(),[m,h]=n.useState(!1),v=n.useRef(null),g=d===K.VKCOM?"horizontal":t,y=d===K.IOS?300:200,b=n.useCallback((()=>{h(!0),p(v.current,(e=>{e&&"opacity"!==e.propertyName||s()}),y)}),[v,p,s,y]),w=n.useCallback((e=>{const{action:t,autoClose:n}=e;n?(h(!0),p(v.current,(e=>{e&&"opacity"!==e.propertyName||(s(),t&&t())}),y)):t&&t()}),[v,p,s,y]);return ke(),n.createElement(Nn,{className:a,closing:m,style:o,onClick:b},n.createElement(Tn,{...c,getRootRef:v,onClick:De,onClose:b,timeout:y,className:C("Bv_fYS8DsB_GlrZaL0Fg",d===K.IOS&&"W8QzU50VRtOps1f9xk5F",d===K.VKCOM&&"v2sU9vObQFDew5ihrOKJ","vertical"===g?"UcDiaijKaiFmebdmx1ca":"IUzUIcDBruGa7f7BFB3w",m&&"TUMUK1qpHM4Gt7nQL5DA",f&&"rWjgUKW_AhXcaZmLxsWa"),role:"alertdialog","aria-modal":!0,"aria-labelledby":"vkui--alert--title","aria-describedby":"vkui--alert--desc"},n.createElement("div",{className:"dPV2JCZ43Bl4DcpcNdDG"},T(i)&&n.createElement(Rn,{id:"vkui--alert--title"},i),T(l)&&n.createElement(In,{id:"vkui--alert--desc"},l),r),n.createElement("div",{className:"iibot_SahwNiJaI0xa0M"},e.map(((e,t)=>n.createElement(zn,{key:t,action:e,onItemClick:w})))),f&&n.createElement(Mn,{onClick:b,"aria-label":u})))};var Vn;function Bn(e,t){if("setActive"===t.type&&t.id!==e.activeModal){const n=t.id,r=e.exitingModal||e.activeModal;let a=e.history?[...e.history]:[];const o=Boolean(n&&a.includes(n));return null===n?a=[]:o?a=a.splice(0,a.indexOf(n)+1):a.push(n),{activeModal:n,enteringModal:null,exitingModal:r,history:a,isBack:o}}return"entered"===t.type&&t.id===e.enteringModal?{...e,enteringModal:null}:"exited"===t.type&&t.id===e.exitingModal?{...e,exitingModal:null}:"inited"===t.type&&t.id===e.activeModal?{...e,enteringModal:t.id}:e}function jn(e,t,r=_,a=_,o=_,l=_,i=_){const s=n.useRef({}).current;(function(e){return n.Children.toArray(e)})(t).forEach((e=>{const t=e.props,n=mt(t),r=void 0!==n&&s[n]||{id:n??null};r.onOpen=e.props.onOpen,r.onOpened=e.props.onOpened,r.onClose=e.props.onClose,r.onClosed=e.props.onClosed,r.dynamicContentHeight=!!t.dynamicContentHeight,"number"==typeof t.settlingHeight&&(r.settlingHeight=t.settlingHeight),null!==r.id&&(s[r.id]=r)}));const u=e&&!s[e]?null:e,[c,d]=n.useReducer(Bn,{activeModal:u,enteringModal:null,exitingModal:null,history:u?[u]:[],isBack:!1});$((()=>{d({type:"setActive",id:u??null})}),[e]),$((()=>{c.activeModal&&(i(s[c.activeModal]),d({type:"inited",id:c.activeModal}))}),[c.activeModal]);const f=e=>null!=e&&s[e]?.type===Vn.CARD,p=n.useCallback((e=>{if(e){const t=s[e];M(t.onOpened)?t.onOpened():M(a)&&a(e)}d({type:"entered",id:e})}),[s,a]),m=n.useCallback((e=>{if(e){const t=s[e];M(t.onClosed)?t.onClosed():M(l)&&l(e)}d({type:"exited",id:e})}),[s,l]),h=Boolean(c.exitingModal&&(f(e)||f(c.exitingModal))),v=n.useCallback((e=>e?s[e]:void 0),[s]);return{onEnter:function(){const e=c.activeModal&&s[c.activeModal];e&&(M(e.onOpen)?e.onOpen():M(r)&&e.id&&r(e.id))},onEntered:p,onExit:function(){const e=c.activeModal&&s[c.activeModal];e&&(M(e.onClose)?e.onClose():M(o)&&e.id&&o(e.id))},onExited:m,...c,delayEnter:h,getModalState:v}}!function(e){e.PAGE="page",e.CARD="card"}(Vn||(Vn={})),ht("ModalRoot");const Wn="fDL_25x1cgKd6NxtT9bm",Fn="CllBSvL9l7VIlQE0Qf2X",Hn="njhinfYUyue1xxF08iFk",Un="MTXX3CXHbQlJN0I8trQ8",Kn="geD5F2JGcHnhFK6bQrDg",Gn=ht("ModalRoot");function Yn(e,t){return!!t&&e>=t[0]&&e<=t[1]}function Xn(e){return he(e,0,98)}class Qn extends n.Component{constructor(e){super(e),this.state={touchDown:!1,dragging:!1},this.maskElementRef=n.createRef(),this.modalRootContext={updateModalHeight:this.updateModalHeight,registerModal:({id:e,...t})=>Object.assign(this.props.getModalState(e)??{},t),onClose:()=>this.props.onExit(),isInsideModal:!0},this.frameIds={}}documentScrolling=!1;maskElementRef;viewportRef=n.createRef();maskAnimationFrame=void 0;modalRootContext;frameIds;restoreFocusTo=void 0;get timeout(){return this.props.platform===K.IOS?400:320}get document(){return this.props.document}get window(){return this.props.window}getModals(){return n.Children.toArray(this.props.children)}componentDidMount(){this.props.platform===K.IOS&&this.window?.addEventListener("resize",this.updateModalTranslate,!1)}componentWillUnmount(){this.toggleDocumentScrolling(!0),this.window.removeEventListener("resize",this.updateModalTranslate,!1)}componentDidUpdate(e){if(this.props.exitingModal&&this.props.exitingModal!==e.exitingModal&&this.closeModal(this.props.exitingModal),this.props.enteringModal&&this.props.enteringModal!==e.enteringModal){const{enteringModal:e}=this.props,t=this.props.getModalState(e);this.props.onEnter(),this.waitTransitionFinish(t,(()=>{t?.innerElement&&(t.innerElement.style.transitionDelay=""),this.props.onEntered(e)})),t?.innerElement&&(t.innerElement.style.transitionDelay=this.props.delayEnter?`${this.timeout}ms`:"",this.animateTranslate(t,t.translateY))}this.props.activeModal&&!e.activeModal&&(this.restoreFocusTo=this.document.activeElement),this.props.activeModal||this.props.exitingModal||!this.restoreFocusTo||(this.restoreFocusTo.focus(),this.restoreFocusTo=null),this.toggleDocumentScrolling(!this.props.activeModal&&!this.props.exitingModal)}toggleDocumentScrolling(e){this.documentScrolling!==e&&(this.documentScrolling=e,e?this.window.removeEventListener("touchmove",this.preventTouch,{passive:!1}):this.window.addEventListener("touchmove",this.preventTouch,{passive:!1}))}preventTouch=e=>{if(!e)return!1;for(;e.originalEvent;)e=e.originalEvent;return e.preventDefault&&e.preventDefault(),!1};updateModalTranslate=()=>{const e=this.props.getModalState(this.props.activeModal);e&&this.animateTranslate(e,e.translateY)};checkPageContentHeight(){const e=this.props.getModalState(this.props.activeModal);if(e?.type===Vn.PAGE&&e?.modalElement){const t={...e};Zn(e);const n={...e};let r=!1;t.expandable===n.expandable?t.translateYFrom!==n.translateYFrom&&(r=!0):r=!0,r&&this.animateTranslate(e,e.translateY)}}updateModalHeight=()=>{const e=this.props.getModalState(this.props.activeModal);e&&e.type===Vn.PAGE&&e.dynamicContentHeight&&(this.props.enteringModal?this.waitTransitionFinish(e,(()=>{requestAnimationFrame((()=>this.checkPageContentHeight()))})):requestAnimationFrame((()=>this.checkPageContentHeight())))};closeModal(e){this.setState({touchDown:!1});const t=this.props.getModalState(e);if(!t)return void(e&&Gn(`closeActiveModal: модальное окно (страница) ${e} не существует`,"error"));const n=this.props.getModalState(this.props.activeModal),r=!!n&&n.type===Vn.PAGE,a=!!t&&t.type===Vn.PAGE;this.waitTransitionFinish(t,(()=>this.props.onExited(e)));const o=a&&r&&(t.translateY??0)<=(n?.translateYFrom??0)&&!this.props.isBack?(n?.translateYFrom??0)+10:100;this.animateTranslate(t,o),n||this.setMaskOpacity(t,0)}onTouchMove=e=>{if(this.props.exitingModal)return;const t=this.props.getModalState(this.props.activeModal);return t?t.type===Vn.PAGE?this.onPageTouchMove(e,t):t.type===Vn.CARD?this.onCardTouchMove(e,t):void 0:void 0};onPageTouchMove(e,t){const{shiftY:n,originalEvent:r}=e,a=r.target;if(!e.isY)return void(this.viewportRef.current?.contains(a)&&r.preventDefault());if(!t.innerElement?.contains(a))return r.preventDefault();r.stopPropagation();const{expandable:o,contentScrolled:l,collapsed:i,expanded:s}=t;if(this.state.touchDown||(t.touchStartContentScrollTop=t.contentElement?.scrollTop??0,this.setState({touchDown:!0})),!l&&(null===t.touchMovePositive&&(t.touchMovePositive=n>0),!t.expandable||i||s&&t.touchMovePositive&&0===t.touchStartContentScrollTop||t.headerElement?.contains(a))){if(r.preventDefault(),!o&&n<0||!this.window)return;!this.state.dragging&&this.setState({dragging:!0});const e=n/this.window.innerHeight*100,a=Ke(e,72,.8,this.props.platform!==K.IOS);t.touchShiftYPercent=e,t.translateYCurrent=Xn((t.translateY??0)+a),this.animateTranslate(t,t.translateYCurrent),this.setMaskOpacity(t)}}onCardTouchMove(e,t){const{originalEvent:n,shiftY:r}=e,a=n.target;if(t.innerElement?.contains(a)){this.state.touchDown||this.setState({touchDown:!0,dragging:!0});const e=r/t.innerElement.offsetHeight*100,n=Ke(e,72,1.2,this.props.platform!==K.IOS);t.touchShiftYPercent=e,t.translateYCurrent=Math.max(0,(t.translateY??0)+n),this.animateTranslate(t,t.translateYCurrent),this.setMaskOpacity(t)}}onTouchEnd=e=>{const t=this.props.getModalState(this.props.activeModal);return t?.type===Vn.PAGE?this.onPageTouchEnd(e,t):t?.type===Vn.CARD?this.onCardTouchEnd(e,t):void 0};onPageTouchEnd(e,t){const{startY:n,shiftY:r}=e;let a;if(t.contentScrolled=!1,t.touchMovePositive=null,this.state.dragging&&this.window){const o=(n+r)/this.window.innerHeight*100;let l=t.translateYCurrent??0;l=Xn(l+l/e.duration*240*.6*((t.touchShiftYPercent??0)<0?-1:1)),l=100!==t.settlingHeight?Yn(l,t.expandedRange)?t.expandedRange?.[0]??0:Yn(l,t.collapsedRange)?t.translateYFrom??0:Yn(l,t.hiddenRange)?100:t.translateYFrom??0:Yn(l,[0,25])?0:100,100!==l&&o>=75&&(l=100),t.translateY=l,t.translateYCurrent=l,t.collapsed=l>0&&l<o,t.expanded=0===l,t.hidden=100===l,t.hidden&&this.props.onExit(),a=()=>{t.hidden||this.animateTranslate(t,t.translateY),this.setMaskOpacity(t)}}this.setState({touchDown:!1,dragging:!1},a)}onCardTouchEnd({duration:e},t){let n;if(this.state.dragging){let r=t.translateYCurrent??0;const a=r/e*240*.6*((t.touchShiftYPercent??0)<0?-1:1);r=Math.max(0,r+a),r=r>=30?100:0,t.translateY=r,t.hidden=100===r,t.hidden&&this.props.onExit(),n=()=>{t.hidden||this.animateTranslate(t,t.translateY),this.setMaskOpacity(t)}}this.setState({touchDown:!1,dragging:!1},n)}onScroll=e=>{const t=this.props.activeModal,n=e.target;if(!t)return;const r=this.props.getModalState(t);r?.type===Vn.PAGE&&r?.contentElement?.contains(n)&&(r.contentScrolled=!0,r.contentScrollStopTimeout&&clearTimeout(r.contentScrollStopTimeout),r.contentScrollStopTimeout=setTimeout((()=>{r.contentScrolled&&(r.contentScrolled=!1)}),250))};waitTransitionFinish(e,t){if(ft.supported){const n=()=>{e?.innerElement?.removeEventListener(ft.name,n),t()};e?.innerElement?.addEventListener(ft.name,n)}else setTimeout(t,this.timeout)}animateTranslate(e,t){const n=`animateTranslateFrame${e.id}`;cancelAnimationFrame(this.frameIds[n]),this.frameIds[n]=requestAnimationFrame((()=>{var n,r;n=e.innerElement,r=`translate3d(0, ${t}%, 0)`,n&&(n.style.transform=r,n.style.webkitTransform=r)}))}setMaskOpacity(e,t=null){null===t&&this.props.history?.[0]!==e.id||(this.maskAnimationFrame&&cancelAnimationFrame(this.maskAnimationFrame),this.maskAnimationFrame=requestAnimationFrame((()=>{if(this.maskElementRef.current){const{translateY:n=0,translateYCurrent:r=0}=e,a=null===t?1-(r-n)/(100-n)||0:t;this.maskElementRef.current.style.opacity=he(a,0,100).toString()}})))}render(){const{activeModal:e,exitingModal:t,enteringModal:r}=this.props,{touchDown:a,dragging:o}=this.state;return e||t?n.createElement(Xe.Provider,{value:!0},n.createElement(Yt.Provider,{value:this.modalRootContext},n.createElement(Ye,{className:C(Wn,this.props.configProvider?.webviewType===X.VKAPPS&&Un,a&&C("iKWLBesXTbj191moEYqp","vkuiInternalModalRoot--touched"),!(!r&&!t)&&C("G8AYKE8aYV_lILsZgKPQ","vkuiInternalModalRoot--switching")),onMove:this.onTouchMove,onEnd:this.onTouchEnd,onScroll:this.onScroll},n.createElement("div",{className:Fn,onClick:this.props.onExit,ref:this.maskElementRef}),n.createElement("div",{className:Hn,ref:this.viewportRef},this.getModals().map((r=>{const a=mt(r.props),l=this.props.getModalState(a);if(a!==e&&a!==t||!l)return null;const i={...l},s=i.type===Vn.PAGE,u=`modal-${a}`;return n.createElement(Tn,{key:u,getRootRef:e=>{const t=this.props.getModalState(a);t&&(t.modalElement=e)},onClose:this.props.onExit,timeout:this.timeout,className:C(Kn,o&&"vkuiInternalModalRoot__modal--dragging",s&&i.expandable&&"vkuiInternalModalRoot__modal--expandable",s&&i.collapsed&&"vkuiInternalModalRoot__modal--collapsed"),restoreFocus:!1},r)})))))):null}}const qn=function(e,t,r){return function(r){const a=n.useContext(t);return n.createElement(e,{...r,configProvider:a})}}(function(e){return function(t){const{platform:r}=J();return n.createElement(e,{...t,platform:r})}}((Jn=function(e=_){return function(t){return function(r){const a=jn(r.activeModal,r.children,r.onOpen,r.onOpened,r.onClose,r.onClosed,e);return n.createElement(t,{...r,...a})}}}((function(e){switch(e.type){case Vn.PAGE:return e.settlingHeight=e.settlingHeight||75,Zn(e);case Vn.CARD:return function(e){e.translateY=0}(e)}}))(Qn),e=>{const t=le();return n.createElement(Jn,{...e,...t})})),Q);var Jn;function Zn(e){const{contentElement:t}=e,n=(t?.firstElementChild).offsetHeight;let r=e.translateY;e.expandable=n>(t?.clientHeight??0)||100===e.settlingHeight;let a,o,l,i,s,u=!1,c=!1;if(e.expandable){a=100-(e.settlingHeight??0);const t=a/2,n=100-a;l=[0,t],i=[t,a+n/4],s=[a+n/4,100],u=a>0,c=a<=0,o=a}else a=100-(n+(e.headerElement?.offsetHeight??0))/(e.innerElement?.parentElement?.offsetHeight??0)*100,o=a,l=[o,o+25],i=[o+25,o+25],s=[o+25,o+100];(e.expandable&&o>(r??100)||100===e.settlingHeight)&&(o=0),0===o&&(c=!0,u=!1),e.expandedRange=l,e.collapsedRange=i,e.hiddenRange=s,e.translateY=o,e.translateYFrom=a,e.collapsed=u,e.expanded=c}ht("ModalRoot");const $n=({activeModal:e,children:t,onOpen:r,onOpened:a,onClose:o,onClosed:l})=>{const i=n.useRef(null),s=n.useRef(void 0),u=n.useRef(void 0),{document:c}=le(),{webviewType:d,platform:f}=J(),{activeModal:p,exitingModal:m,onExit:h,getModalState:v,enteringModal:g,onEnter:y,onEntered:b,onExited:w,history:E,delayEnter:k}=jn(e,t,r,a,o,l,_),{waitTransitionFinish:S}=pt(),x=ut({exitingModal:m,enteringModal:g,activeModal:p}),T=gt({updateModalHeight:()=>{},registerModal:({id:e,...t})=>Object.assign(v(e)??{},t),onClose:h,isInsideModal:!0}),P=f===K.IOS?400:320,M=n.Children.toArray(t),N=(e,t)=>{e?.innerElement&&(e.innerElement.style.transition="",e.innerElement.style.transitionDelay=t&&k?`${P}ms`:"",e.innerElement.style.opacity=t?"1":"0")};return n.useEffect((()=>{x&&(m&&m!==x.exitingModal&&(e=>{const t=v(e);t&&(p?w(e):requestAnimationFrame((()=>{S(t?.innerElement,(()=>w(e)),P),N(t,!1),((e,t=null)=>{null===t&&E?.[0]!==e.id||(s.current&&cancelAnimationFrame(s.current),s.current=requestAnimationFrame((()=>{if(i.current){const{translateY:n=0,translateYCurrent:r=0}=e,a=null===t?1-(r-n)/(100-n)||0:t;i.current.style.opacity=he(a,0,100).toString()}})))})(t,0)})))})(m),g&&g!==x.enteringModal&&(()=>{if(!g||!x)return;const e=v(g);y(),x.exitingModal?(e?.innerElement&&(e.innerElement.style.transition="none",e.innerElement.style.opacity="1"),b(g)):requestAnimationFrame((()=>{g==g&&(S(e?.innerElement,(()=>b(g)),P),N(e,!0))}))})(),p&&!x.activeModal&&(u.current=c?.activeElement??void 0),p||m||!u.current||(u.current.focus(),u.current=void 0))})),p||m?n.createElement(Yt.Provider,{value:T},n.createElement("div",{className:C(Wn,d===X.VKAPPS&&Un,"ftRshO1m_HVqB6L_kari")},n.createElement("div",{className:Fn,ref:i,onClick:h}),n.createElement("div",{className:Hn},M.map((e=>{const t=mt(e.props);if(t!==p&&t!==m)return null;const r=`modal-${t}`;return n.createElement(Tn,{restoreFocus:!1,onClose:h,timeout:P,key:r,className:Kn},e)}))))):null},er=e=>{const{isDesktop:t}=sn();ke(!!e.activeModal);const r=t?$n:qn;return n.createElement(r,e)},tr=r["useId".toString()];let nr=0;const rr=tr??function(){const[e]=n.useState((()=>nr++));return`:r${e}:`};function ar(e){return e&&90===Math.abs(e.screen?.orientation?.angle??Number(e.orientation))?"landscape":"portrait"}const or=n.createContext({}),lr={s:"Wa5so60LT4_CWb2A_EQk",m:"R8ajgJtF7uHVVmyWdPLu",l:"b8835_0yW6ZwOQxmOWA0"},ir=(ht("ModalPage"),({children:e,header:t,size:r="s",onOpen:a,onOpened:o,onClose:l,onClosed:i,settlingHeight:s,dynamicContentHeight:u,getModalContentRef:c,nav:d,id:f,hideCloseButton:p=!1,className:m,...h})=>{const v=rr(),g=f||v,{updateModalHeight:y}=n.useContext(Yt),b=xe(),w=function(){const{window:e}=le(),[t,r]=n.useState((()=>ar(e)));return ue(e,"orientationchange",(()=>r(ar(e)))),t}(),{sizeX:E,isDesktop:k}=sn();n.useEffect(y,[e,w,y]);const S=!p&&k,_=k?r:"s",x=n.useContext(Yt),{refs:T}=function(e,t){const r=n.useContext(Yt),a=n.useRef({}).current;return $((()=>{if(void 0!==e){r.registerModal({...a,type:t,id:e});const n=Object.keys(a).reduce(((e,t)=>({...e,[t]:null})),{type:t,id:e});return()=>r.registerModal(n)}}),[]),{refs:n.useRef({modalElement:e=>a.modalElement=e,innerElement:e=>a.innerElement=e,headerElement:e=>a.headerElement=e,contentElement:e=>a.contentElement=e}).current}}(mt({nav:d,id:g}),Vn.PAGE),P=n.useMemo((()=>({labelId:`${g}-label`})),[g]);return n.createElement(or.Provider,{value:P},n.createElement("div",{...h,role:"dialog","aria-modal":"true","aria-labelledby":P.labelId,id:g,className:C("fcpDs4jQCuPMgzK7lCYw",b===K.IOS&&"AqM7ngHhbdWVxf7Tndg_",k&&"vbFIG9J3xJTd7oVpxsMW",E===fe.REGULAR&&"vkuiInternalModalPage--sizeX-regular","string"==typeof _&&lr[_],m)},n.createElement("div",{className:"cnpDj7KNE0j3orzaPXOW",style:{maxWidth:"number"==typeof _?_:void 0},ref:T.innerElement},n.createElement("div",{className:"cn17iuypADZI3SlHarbO"},n.createElement("div",{className:"wYdZBhfWw673DB_zzMzJ",ref:T.headerElement},t),n.createElement("div",{className:"qTEmtjRzpdBLUmP4bxKx"},n.createElement("div",{className:"N8bri2mk8vtdvUQbN6d9",ref:Ie(T.contentElement,c)},n.createElement("div",{className:"TSVV4SD60m2VdxROhsrK"},e))),S&&n.createElement(Mn,{onClick:l||x.onClose})))))}),sr=({children:e,separator:t=!0,getRef:r,className:a,...o})=>{const l=xe(),i=t&&l===K.VKCOM,{isDesktop:s}=sn(),{labelId:u}=n.useContext(or);return n.createElement("div",{className:C("DFaJqLGQFTQlJ5YqFBfD",l!==K.VKCOM&&"pt0__qxmNcRdAkAOPnPA",s&&"pqnMT33CWLoneKCvzgod"),ref:r},n.createElement(en,{className:C("vkuiInternalModalPageHeader__in",a),...o,fixed:!1,separator:!1,transparent:!0},n.createElement(en.Content,{Component:"h2",id:u},e)),i&&n.createElement(Xt,{wide:!0}))},ur=({mode:e="horizontal",gap:t="m",stretched:r=!1,align:a="left",getRootRef:o,className:l,children:i,...s})=>n.createElement("div",{className:C(l,"Gsr65XlWWWxXqQzIGo_P",{vertical:"A55BoMESEyZDG8zDPWbG",horizontal:"n8fPaARFKAcwwSUeRCfV"}[e],"none"!==t&&{space:"Aa0NxvuPxqU4KO002NdZ",s:"cAA6CW7eEINfRKTVbHKS",m:"a25m2mdobbeEeDYsC2io"}[t],r&&"XrT_bCPVOKndzd3_UvOr",{left:"LgMb45_TUE0t207Y842n",center:"BFdTk7N1L6zDHw5Bmr8U",right:"ynEHo4rwtxaO8kKCViK6"}[a]),role:"group",ref:o,...s},i),cr={none:"O4yPmvIquI2ZT53_m1Ig",[fe.COMPACT]:"DJMecgcdAtVRSqltfme8"},dr=(ht("IconButton"),({children:e,className:t,...r})=>{const a=xe(),{sizeY:o="none"}=B();return n.createElement(lt,{activeEffectDelay:200,activeMode:"background",Component:r.href?"a":"button",...r,className:C("RGs8GB70NlAOakzA7Vco",o!==fe.REGULAR&&cr[o],a===K.IOS&&"hGRfUGje2II5PQh_EMx3",t)},e)}),fr={none:"N5LBL61rayFIQEYEF8Hx",[fe.COMPACT]:"ejbJ91Zi11nki6AS3F9e",[fe.REGULAR]:"jN1Y81nytrLDraMyalKs"},pr=(ht("Group"),({header:e,description:t,children:r,separator:a="auto",getRootRef:o,mode:l,padding:i="m",className:s,tabIndex:u,...c})=>{const{isInsideModal:d}=n.useContext(Yt),f=xe(),{sizeX:p="none"}=B();let m=l;l||(m=d?"plain":"none");const h="tabpanel"===c.role&&void 0===u?0:u,v=C("_5kzwX2nvBzX4WXVck5s","show"===a&&"kFt31edDsMHWpBcgZYDQ");return n.createElement(n.Fragment,null,n.createElement("section",{...c,tabIndex:h,ref:o,className:C("vkuiInternalGroup","H9z2HBN_m95E8syuVUbx",f===K.IOS&&"k2_RzIQXBGMHzgF8Pfke",fr[p],m&&{none:C("grX74_f3HGqVDylEU09o","vkuiInternalGroup--mode-none"),plain:C("V1ZMIFftuk4l5FWbAaIv","vkuiInternalGroup--mode-plain"),card:C("VCPfB5zPqEgw6D06MqaL","vkuiInternalGroup--mode-card")}[m],{s:"Ix0b9WlKNJHArPw963hE",m:"JoaTI9ac0uvWZ3v4ER9w"}[i],s)},e,r,T(t)&&n.createElement(Cn,{className:"YPC3YThUUli7ezdeAV55"},t)),"hide"!==a&&n.createElement(n.Fragment,null,n.createElement(Qt,{className:C(v,"G6Cv641bwDxKKKj63EZw"),size:16}),n.createElement(Xt,{className:C(v,"z2IcLZIQ2UWOn0Qolwlg")})))}),mr={none:"AD6uZkyY_14T2oLVm8s1",[fe.COMPACT]:"SRKHWXKh2ns5tbScWeTM"},hr=({className:e,Component:t="h5",normalize:r=!0,...a})=>{const{sizeY:o="none"}=B();return n.createElement(Pt,{Component:t,normalize:r,className:C(e,"GYq8cwnZ_BBQyRUgiY8q",o!==fe.REGULAR&&mr[o]),...a})},vr={none:"oRNkgPeYBCtxiCUxehij",[fe.COMPACT]:"CtcFXhaBk3KOFDnMC2Tc"},gr=({subhead:e,children:t,text:r,caption:a,before:o,after:l,afterCaption:i,bottom:s,actions:u,multiline:c,className:d,...f})=>{const{sizeY:p="none"}=B();return n.createElement(lt,{...f,className:C("LyEYsZ2penW93YiKJvEX",!c&&"hfipputEUo9wGeIwVrDp",p!==fe.REGULAR&&vr[p],d)},o&&n.createElement("div",{className:"ccw7XCj2vn8iBRGjSyDm"},o),n.createElement("div",{className:"dZaEPVnu8I4JGW1J8qZ2"},n.createElement("div",{className:"olTnyo6yJZO7UNgaBjI9"},n.createElement("div",{className:"dIPYf4ekoPAtzB9_nHSE"},e&&n.createElement(hr,{Component:"div",className:"LSEnu4WiUkaF4bWkBur2"},e),n.createElement("div",{className:"rW_mKWitUEK4je2z1eTs"},t),r&&n.createElement("div",{className:"G6zr6KzCUYLhIjJqP5g7"},r),a&&n.createElement(hr,{Component:"div",className:"H1p1LVny5SnGFZxk9_vk"},a)),(l||i)&&n.createElement("div",{className:"KmI_GWzBY1SzIGo4CNJA"},l&&n.createElement("div",{className:"n0eVjDsUhQQ3lSCiIpna"},l),i&&n.createElement("div",{className:"DRLsO_f3WU0621tiT4HV"},i))),s&&n.createElement("div",{className:"GAxSCbRyCwZIDZO0J4bv"},s),u&&n.createElement("div",{className:"zZ2swigOZyTFhTHHRHlA"},u)))};gr.Icon=({children:e,className:t,...r})=>n.createElement("div",{...r,className:C("e7J9_ciTxqvU6Fj_r30d",t)},e);const yr=S("Icon24Chevron","chevron_24","0 0 16 24",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 24" id="chevron_24"><g fill="none" fill-rule="evenodd"><path d="M0 0h16v24H0z" /><path fill="currentColor" d="M4.706 7.706a1 1 0 0 1 0-1.412l.088-.088a.997.997 0 0 1 1.414.002l5.084 5.084a.998.998 0 0 1 0 1.416l-5.084 5.084a1.002 1.002 0 0 1-1.414.002l-.088-.088a.995.995 0 0 1 0-1.412L9 12 4.706 7.706Z" /></g></symbol>',16,24,!1,void 0),br={none:"KLdAVmjLYffFWXSEzsXA",[fe.COMPACT]:"di81PfkyD3LshXWTM_Dr"},wr=({className:e,weight:t="3",level:r="1",Component:a="h4",normalize:o=!0,...l})=>{const{sizeY:i="none"}=B();return n.createElement(Pt,{Component:a,normalize:o,weight:t,className:C(e,"upf5QOrVuHauBCCFsu_w",i!==fe.REGULAR&&br[i],{1:"xFnCEBDZTHs217AIM12U",2:"GlqxvJA2RsgBL5JChOjt"}[r]),...l})},Er="BoOTUyWEbjQ6LHXqhtaN",kr="p7hf1O3jyGqjtk3TU5DT",Sr="Hu0KZTn2vEd3ORPVOLs_",Cr={ios:C("cIH3fwsx_AZ4r0_OGoz5","vkuiInternalSimpleCell--ios"),android:"q4bOmTZDC63jgdAWFH_z",vkcom:"cOp3aa0Y1_1fgGmmUaIB"},_r={none:C("kFJNoGfoapa4Yfy2f1yn","vkuiInternalSimpleCell--sizeY-none"),[fe.COMPACT]:C("oCBu7KZ5A5JSAHK84hcG","vkuiInternalSimpleCell--sizeY-compact"),[fe.REGULAR]:"dUHLqkvp33uLv5PjOToF"},xr=({badgeBeforeTitle:e,badgeAfterTitle:t,badgeBeforeSubtitle:r,badgeAfterSubtitle:a,before:o,indicator:l,children:i,after:s,expandable:u,multiline:c,subhead:d,subtitle:f,extraSubtitle:p,className:m,...h})=>{const v=xe(),g=T(s)||u&&v===K.IOS,{sizeY:y="none"}=B();return n.createElement(lt,{...h,className:C("pjHmj8cKilnM953bqjDi","vkuiInternalSimpleCell",Cr.hasOwnProperty(v)?Cr[v]:Cr.android,_r[y],c&&"gYkN6RjXHvUxq0ofez9i",m)},o,n.createElement("div",{className:C("aamfLTxBNQr1UdOFBigY","vkuiInternalSimpleCell__main")},d&&n.createElement(hr,{Component:"span",className:C(Er,"P77iHK3ropzH96mVRXkG")},d),n.createElement("div",{className:kr},e&&n.createElement("span",{className:Sr},e),n.createElement(wr,{Component:"span",className:"rYQdXyh075vy7abz3tTK",weight:"3"},i),T(t)&&n.createElement("span",{className:Sr},t)),f&&n.createElement("div",{className:kr},r&&n.createElement("span",{className:Sr},r),n.createElement(Cn,{normalize:!1,className:C(Er,"ccSHjfClsl2rQdEhz1pA")},f),a&&n.createElement("span",{className:Sr},a)),p&&n.createElement(Cn,{normalize:!1,className:C(Er,"IlYetJNj_5dk5cqEaFhQ")},p)),T(l)&&n.createElement(wr,{Component:"span",weight:"3",className:"NGInPqZ1kScORR8GMHEf"},l),g&&n.createElement("div",{className:C("Lg4XOLepukGrx1CSDSJd","vkuiInternalSimpleCell__after")},s,u&&v===K.IOS&&n.createElement(yr,null)))},Tr={stroke:"JSLAMWYOZpEbOr6ZMKJU",shadow:"cVV2uSYr3PTsNhKfYefe"},Pr="uMPorWeqSu0KHQD9JGh6",Mr=n.createContext({size:0}),Nr=({alt:e,crossOrigin:t,decoding:r,loading:a,referrerPolicy:o,sizes:l,src:i,srcSet:s,useMap:u,getRef:c,size:d=24,width:f,height:p,style:m,className:h,getRootRef:v,withBorder:g=!0,fallbackIcon:y,children:b,"aria-label":w,onClick:E,onLoad:k,onError:S,..._})=>{const[x,T]=n.useState(!1),[P,M]=n.useState(!1),N=i||s,O=!P&&N||!n.isValidElement(y)?null:y,A=(()=>{switch(d){case 28:return"T6yT_EWMCBAevyUL_Fet";case 32:return"ahTnRkYDJ6rdzTGnKrrA";case 40:return"oZ0Gm9QsMDCH6cixCaCN";case 48:return"wX_90eHfm6UnPXIOFH02";case 72:return"DHlrUKrTVAfuLo6FJXAJ"}return null})();return n.createElement(Mr.Provider,{value:{size:d}},n.createElement("div",{..._,ref:v,style:{...m,width:d,height:d},className:C(h,"ftizEeaNpGcPL9YxM2tS",A,g&&"dmxedbD5Zf2SZnFnbm_6",x&&"w8nRRQj5oNOTDC34Bprn"),role:N?"img":"presentation","aria-label":w,onClick:E},N&&n.createElement("img",{ref:c,alt:e,className:"FCUjldxsZ8qWrNDPBz7o",crossOrigin:t,decoding:r,loading:a,referrerPolicy:o,sizes:l,src:i,srcSet:s,useMap:u,width:f,height:p,onLoad:e=>{T(!0),M(!1),k?.(e)},onError:e=>{T(!1),M(!0),S?.(e)}}),O&&n.createElement("div",{className:C("KVUFuXAttfqYx4kC3R1N")},O),b))};Nr.Badge=({background:e="shadow",children:t,className:r,...a})=>n.createElement("div",{...a,className:C("mGc2lHavDbGJbTJV_ixU",Tr[e],r)},t),Nr.Overlay=({className:e,theme:t,visibility:r,children:a,onClick:o,...l})=>{const i=Z(),s=Le(),u=t??i,c=r??(s?"on-hover":"always");return n.createElement(lt,{...l,type:"button",Component:"button",className:C("eADS2hBYbEudyj1saU8_","always"===c&&Pr,"light"===u&&"vT9o4QT6VAQeVxwLpd_X","dark"===u&&"zNcm2EgcxyrkBGzXXDIO",e),hasHover:"on-hover"===c,hoverMode:"on-hover"===c?Pr:void 0,focusVisibleMode:"hiYj9B0n7vU2EceP0FGA",hasActive:!1,onClick:o},a)};const Or=({size:e=48,borderRadius:t="m",style:r,className:a,...o})=>{let l;switch(t){case"s":e<=32?l=2:e<=56&&(l=3),l=4;break;case"m":e<=32?l=3:e<=48?l=4:e<=72?l=6:e<=80&&(l=8),l=10;break;case"l":e<=16?l=4:e<=20?l=5:e<=32?l=6:e<=40?l=8:e<=48?l=10:e<=56?l=12:e<=64&&(l=14),l=16}return n.createElement(Nr,{...o,size:e,style:{...r,borderRadius:l},className:a})};Or.Badge=({className:e,...t})=>{const{size:r}=n.useContext(Mr);return n.createElement(Nr.Badge,{...t,className:C("vWFKBA9fqzpT7aYPymX8",r<96&&"qEpU4dPOHN6vwVXYXY05",e)})},Or.Overlay=Nr.Overlay;const Ar={secondary:"NgDxW1HHlMRTFKkL9Gf3",primary:"wO69D9n2etYJrvcWXG29",prominent:"bUQdRenC4TOtpDXwBs4r",contrast:"C14dRfGdusp2RI38vobh",inherit:"tlgqqwjNPd_L6JKuYcnP"},Lr={s:"bEhhU5q3jOxOzJbsv8LU",m:"wxYVK40KV57OqR_nsxyM"},Rr=({mode:e="inherit",size:t="m",children:r,className:a,...o})=>{if(0===n.Children.count(r))return null;const l="s"===t?On:wr,i="s"===t?"1":"2";return n.createElement(l,{...o,Component:"span",className:C("vkuiInternalCounter","OFQXoEXM3JRkatSEzxRp",Ar[e],Lr[t],a),level:i},r)},Ir=({icon:e,header:t,action:r,children:a,stretched:o,getRootRef:l,className:i,...s})=>n.createElement("div",{...s,ref:l,className:C("AgUrFiL2EO6WfEAwEU1t",o&&"sD_N4dZhqxf84HzPSTk4",i)},n.createElement("div",{className:"mW1BiGzzdjGpsCeqVVeC"},T(e)&&n.createElement("div",{className:"DyouGQvA1tEbQZKGpinn"},e),T(t)&&n.createElement(Ot,{level:"2",weight:"2",className:"BSV0XrF9v7D929rRDuq2"},t),T(a)&&n.createElement(wr,{weight:"3",className:"HWSp1BbkTFC_AxNr0wwv"},a),T(r)&&n.createElement("div",{className:"xC6XQzvX2vVQA_ZnrGDQ"},r))),zr=e=>e.preventDefault(),Dr=({children:e,Component:t="form",getRef:r,onSubmit:a=zr,className:o,...l})=>n.createElement(t,{...l,className:C("AfVYOIohVRGJLo8q9AhN",o),onSubmit:a,ref:r},e,"form"===t&&n.createElement("input",{type:"submit",className:"ULOWfB8mHraqSk1JLL5H",value:""})),Vr=S("Icon24Cancel","cancel_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" id="cancel_24"><path d="M7.536 6.264a.9.9 0 0 0-1.272 1.272L10.727 12l-4.463 4.464a.9.9 0 0 0 1.272 1.272L12 13.273l4.464 4.463a.9.9 0 1 0 1.272-1.272L13.273 12l4.463-4.464a.9.9 0 1 0-1.272-1.272L12 10.727 7.536 6.264Z" /></symbol>',24,24,!1,void 0),Br="oR3tND8v2RPME_AtbiFn",jr="x01S5W43kVRd8xncCnjA",Wr="jIfu2WTVLtl_PO_DWvS6",Fr=({onRemove:e,removePlaceholder:t,removePlaceholderString:r,children:a})=>{const{window:o}=le(),l=n.useRef(null),i=n.useRef(!0),[s,u]=n.useState(0);return ue(o,"click",(()=>{s>0&&u(0)}),{capture:!0}),n.createElement("div",{className:C(Br,"vkuiInternalRemovable__content"),style:{transform:`translateX(-${s??0}px)`},onTransitionEnd:()=>{s>0?l?.current?.focus():i.current=!0}},n.createElement(dr,{hasActive:!1,hasHover:!1,"aria-label":r,className:C(jr,"Z3K7wFTboxSYpfuVyTXj"),onClick:e=>{if(e.stopPropagation(),!l.current)return;const{offsetWidth:t}=l.current;i.current=!1,u(t)},disabled:s>0},n.createElement("i",{className:"yex4ZWbRfrCuVJUylkp1",role:"presentation"})),a,n.createElement("span",{className:Wr,"aria-hidden":!0}),n.createElement(lt,{Component:"button",hasActive:!1,hasHover:!1,disabled:i.current,getRootRef:l,className:"_2B61CqjHC3C00jIeegD",onClick:e},n.createElement("span",{className:"TlzDWeqGz7Zmcc1_VPyf"},t)))},Hr=({getRootRef:e,children:t,onRemove:r=_,removePlaceholder:a="Удалить",align:o="center",className:l,indent:i=!1,...s})=>{const u=xe(),c=Ve(e),d=e=>{e.preventDefault(),r(e)},f=ze(a);return n.createElement("div",{...s,ref:c,className:C(u===K.IOS&&"efITSp4_UfBv7H0tU2OA","start"===o&&"LKaqXx6r2jNf4a7rkhm7",i&&"WcuxYrW5loITqLa_31I9",l)},u!==K.IOS&&n.createElement("div",{className:C(Br,"vkuiInternalRemovable__content")},t,n.createElement(dr,{activeMode:"opacity",hoverMode:"opacity",className:jr,onClick:d,"aria-label":f},n.createElement(Vr,{role:"presentation"})),n.createElement("span",{className:Wr,"aria-hidden":!0})),u===K.IOS&&n.createElement(Fr,{onRemove:d,removePlaceholder:a,removePlaceholderString:f},t))},Ur={none:C("R1k5OEoszXKPIFuUKj19","vkuiInternalFormItem--sizeY-none"),[fe.COMPACT]:C("QUCoCn64lQ6F2bygRtpQ","vkuiInternalFormItem--sizeY-compact")},Kr=({children:e,top:t,bottom:r,status:a="default",Component:o="div",removable:l,onRemove:i=_,removePlaceholder:s="Удалить",getRootRef:u,className:c,...d})=>{const f=Ve(u),{sizeY:p="none"}=B(),m=n.createElement(n.Fragment,null,T(t)&&n.createElement(hr,{className:"p2rwche5lWJK3YCuRhTa"},t),e,T(r)&&n.createElement(Cn,{className:"GKsWowTLg9v9TTSv5sB_"},r));return n.createElement(o,{...d,ref:f,className:C("xQbPBT5iU2jVjKqhWVyo","vkuiInternalFormItem","default"!==a&&{error:C("fK_SOsFa5ijabQnRZuYx","vkuiInternalFormItem--status-error"),valid:C("HkgBxa1luire5U1NmTwa","vkuiInternalFormItem--status-valid")}[a],p!==fe.REGULAR&&Ur[p],T(t)&&C("dK7X_XWUhoGJvxJZQNtI","vkuiInternalFormItem--withTop"),l&&C("gKfCGtpN4QHnxBq3Ajg1","vkuiInternalFormItem--removable"),c)},l?n.createElement(Hr,{align:"start",onRemove:e=>{f?.current&&i(e,f.current)},removePlaceholder:s,indent:"indent"===l},n.createElement("div",{className:C("U44dkWAHuP6nHSmMEgQZ","vkuiInternalFormItem__removable")},m)):m)},Gr={none:"R1VwFPq1MpFcFOJtBNit",[fe.COMPACT]:"nbb6uxptJsxdwgoNC30N"},Yr=({Component:e="span",status:t="default",children:r,getRootRef:a,before:o,after:l,disabled:i,mode:s="default",className:u,...c})=>{const d=Ve(a),f=function(e){const{document:t}=le(),r=()=>!(!e.current||!t)&&e.current.contains(t.activeElement),[a,o]=n.useState(r),l=()=>{const e=r();e!==a&&o(e)};return ue(t,"focus",l,{capture:!0}),ue(t,"blur",l,{capture:!0}),a}(d),{sizeY:p="none"}=B(),[m,h]=n.useState(!1);return n.createElement(e,{...c,ref:d,onMouseEnter:e=>{e.stopPropagation(),h(!0)},onMouseLeave:e=>{e.stopPropagation(),h(!1)},className:C("iyr1BuROR8ls9BJeSRWh","default"===s&&"OmhevA90HnDFki1NySJJ","default"!==t&&{error:"pLNLcIS6VjGKYf4WVi3M",valid:"W6PnMduzCbBIhvZl0XPL"}[t],p!==fe.REGULAR&&Gr[p],i&&"DCAxyeIn9gHHIRb9wTpV",!i&&m&&"iC1zJC_cyLci_ROMxnA6",u)},o&&n.createElement("span",{className:"rCj0cHLuE4PcaT9itVdG"},o),r,l&&n.createElement("span",{className:C("a8gnthE3OBNhmogWf3aZ","vkuiInternalFormField__after")},l),n.createElement("span",{"aria-hidden":!0,className:"JVEpSjzg_o_eDrevstn4"}),n.createElement(Ge,{thin:!0,visible:f,mode:"outline"}))},Xr={none:"T70YXMKHPP5vP3Z1XJJg",[fe.COMPACT]:"SqZ_e5eczskszpf0anfZ"},Qr=({type:e="text",align:t="left",getRef:r,className:a,getRootRef:o,style:l,before:i,after:s,status:u,mode:c,...d})=>{const{sizeY:f="none"}=B();return n.createElement(Yr,{style:l,className:C("ATM3BnNZYiDZyjBKphPH","right"===t&&"vt8qgnJGpB9u6d8xXXfl","center"===t&&"GlbCc4Kl8SzL9pz10Fxy",f!==fe.REGULAR&&Xr[f],i&&"dcZfbm2P_ez9i7pUDeHd",s&&"LAXjF7AA6B7ZvWnQYjFS",a),getRootRef:o,before:i,after:s,disabled:d.disabled,mode:c,status:u},n.createElement("input",{...d,type:e,className:"oSErGkUcmRJ3bHZ2Drwr",ref:r}))},qr=S("Icon28DoneOutline","done_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28" id="done_outline_28"><g fill="none" fill-rule="evenodd"><path d="M0 0h28v28H0z" /><path fill="currentColor" fill-rule="nonzero" d="m11 18.586-5.293-5.293a1 1 0 1 0-1.414 1.414l6 6a1 1 0 0 0 1.414 0l12-12a1 1 0 1 0-1.414-1.414L11 18.586Z" /></g></symbol>',28,28,!1,void 0),Jr=({children:e="Готово",...t})=>{const r=xe();return n.createElement(Rt,{"aria-label":ze(e),primary:!0,...t},r===K.IOS?e:n.createElement(qr,null))};let Zr={type:"",viewportWidth:0,viewportHeight:0};function $r(e){const{type:t,data:n}=e.detail;if("VKWebAppUpdateConfig"!==t||!n)return null;const{adaptivity:r,viewport_width:a,viewport_height:o}=n,l={type:"",viewportWidth:isFinite(a)?+a:0,viewportHeight:isFinite(o)?+o:0};switch(r){case"force_mobile":case"force_mobile_compact":case"adaptive":l.type=r}return l}var ea,ta;F().subscribe((e=>{const t=$r(e);t&&(Zr=t)})),function(e){e.BRIGHT_LIGHT="bright_light",e.SPACE_GRAY="space_gray",e.VKCOM_LIGHT="vkcom_light",e.VKCOM_DARK="vkcom_dark"}(ea||(ea={})),function(e){e.DARK="dark",e.LIGHT="light"}(ta||(ta={}));function na(e){const{scheme:t,appearance:n}=e;return n||(e=>e===ea.SPACE_GRAY||e===ea.VKCOM_DARK?"dark":"light")(t)}let ra=null;F().send("VKWebAppGetConfig").then((e=>{ra=na(e)})).catch(console.error);const aa={title:"Панель управления",photos_list_title:"Фотографии",upload_to_yandex_disk_button:"Загрузить на Яндекс.Диск",go_to_yandex_disk_action:"Перейти на Яндекс.Диск",placeholder_photos_list:"Все фотографии из чата загружены на Яндекс.Диск",tags_list_title:"Теги",yandex_disk_folder_link:"https://disk.yandex.ru/client/disk/%D0%91%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80%D0%B8%D1%8F",tag_label_title:"Название",tag_label_folder:"Папка",save_tag_button:"Сохранить",delete_tag_button:"Удалить",tag_placeholder_title:"Введите название тега",tag_placeholder_folder:"Введите название папки на Яндекс.Диске",cancel_button:"Отмена",delete_tag_title:"Удаление тега",delete_tag_confirm:'Вы уверены, что хотите удалить тег "{tag_name}"?'};var oa,la,ia;!function(e){e.PHOTOS="photos",e.TAGS="tags"}(oa||(oa={})),function(e){e.TAG_CREATE="tag_create"}(la||(la={})),function(e){e.GET_INITIAL_STATE="getInitialState",e.DELETE_TAG="deleteTag",e.ADD_TAG="addTag"}(ia||(ia={}));const sa=S("Icon56CameraOffOutline","camera_off_outline_56","0 0 56 56",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 56 56" id="camera_off_outline_56"><g fill="currentColor"><path fill-rule="evenodd" d="M26.5 19.5A1.5 1.5 0 0 1 28 18c5.523 0 10 4.477 10 10a1.5 1.5 0 0 1-3 0 7 7 0 0 0-7-7 1.5 1.5 0 0 1-1.5-1.5zM6.128 14.424C4.758 16.284 4 18.774 4 21.437V34c0 .582.08 1.804.228 3.038.143 1.185.374 2.632.747 3.535.53 1.282 1.294 2.578 2.307 3.629 1.134 1.359 2.79 2.292 4.466 2.887 1.714.608 3.584.911 5.252.911h21c2.788 0 4.984-.348 6.798-1.08l3.641 3.64a1.5 1.5 0 0 0 2.122-2.12l-42-42a1.5 1.5 0 1 0-2.122 2.12l3.155 3.156c-1.389.524-2.568 1.488-3.466 2.708zM12 14.28c-1.323 0-2.53.667-3.457 1.924C7.607 17.475 7 19.315 7 21.437V34c0 .418.066 1.51.207 2.68.147 1.222.346 2.276.54 2.747.422 1.02.998 1.98 1.772 2.772.823 1.006 2.026 1.634 3.233 2.062 1.386.492 2.916.739 4.248.739h21c1.83 0 3.263-.165 4.421-.457l-8.49-8.49A9.962 9.962 0 0 1 28 38c-5.523 0-10-4.477-10-10 0-2.22.724-4.272 1.948-5.931l-7.79-7.79zM21 28a7 7 0 0 0 7 7 6.963 6.963 0 0 0 3.775-1.104l-9.671-9.671A6.963 6.963 0 0 0 21 28z" clip-rule="evenodd" /><path d="M22 5.5c-1.21 0-2.21.592-2.92 1.16-.724.578-1.326 1.28-1.74 1.773-.102.121-.199.248-.297.372a1.5 1.5 0 1 0 2.348 1.868l.254-.32c.407-.485.842-.978 1.308-1.35.482-.386.826-.503 1.047-.503h12c.221 0 .565.117 1.047.502.498.399.94.89 1.336 1.386l.43.542 1.015 1.273c.625.784 1.571 1.284 2.422 1.588a8.434 8.434 0 0 0 2.75.489h1c1.323 0 2.53.666 3.457 1.923.936 1.272 1.543 3.112 1.543 5.234V34c0 .495 0 1.43-.105 2.476-.107 1.069-.312 2.129-.663 2.909-.106.235-.217.468-.333.697a1.5 1.5 0 0 0 2.675 1.358c.14-.275.27-.55.394-.824.549-1.22.794-2.66.912-3.842.12-1.2.12-2.26.12-2.767v-12.57c0-2.664-.757-5.152-2.128-7.013C48.492 12.55 46.45 11.28 44 11.28h-1a5.443 5.443 0 0 1-1.742-.315c-.608-.217-.957-.472-1.086-.634l-.986-1.238-.526-.66c-.414-.493-1.016-1.195-1.74-1.774C36.21 6.092 35.21 5.5 34 5.5z" /></g></symbol>',56,56,!1,void 0);var ua=function(){return ua=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},ua.apply(this,arguments)},ca=function(t){return(0,e.jsx)(e.Fragment,{children:t.photos.length>0?(0,e.jsx)(pr,{children:t.photos.map((function(t){return(0,e.jsx)(gr,ua({before:(0,e.jsx)(Or,{src:t.url,size:172}),caption:t.uploaded_chat_date,actions:(0,e.jsx)(ur,ua({mode:"horizontal",gap:"s",stretched:!0},{children:(0,e.jsx)(st,ua({mode:"primary",size:"s"},{children:aa.upload_to_yandex_disk_button}))})),disabled:!0},{children:t.uploaded_chat_author}))}))}):(0,e.jsx)(pr,{children:(0,e.jsx)(Ir,ua({icon:(0,e.jsx)(sa,{}),action:(0,e.jsx)(st,ua({size:"m",target:"_blank",href:aa.yandex_disk_folder_link},{children:aa.go_to_yandex_disk_action}))},{children:aa.placeholder_photos_list}))})})};const da=S("Icon28Delete","delete_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28" id="delete_28"><g fill="none" fill-rule="evenodd"><path d="M0 0h28v28H0z" /><path fill="currentColor" fill-rule="nonzero" d="M9.985 25h8.03A2.985 2.985 0 0 0 21 22.015V8H7v14.015A2.985 2.985 0 0 0 9.985 25ZM9.56 4.5c.218-.862.999-1.5 1.929-1.5h5.02c.93 0 1.711.638 1.93 1.5h2.31c.69 0 1.25.56 1.25 1.25v.96c0 .16-.13.29-.29.29H6.29A.29.29 0 0 1 6 6.71v-.96c0-.69.56-1.25 1.25-1.25h2.31Z" /></g></symbol>',28,28,!1,void 0);var fa=function(e,t){return n=void 0,r=void 0,o=function(){var n;return function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(l=0)),l;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=t.call(e,l)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(r){switch(r.label){case 0:return[4,fetch("http://localhost:8085/"+e,t)];case 1:return(n=r.sent()).ok?[4,n.json()]:[3,3];case 2:return[2,r.sent()];case 3:alert("Ошибка API запроса: "+n.status+". Метод: "+e),r.label=4;case 4:return[2,null]}}))},new((a=void 0)||(a=Promise))((function(e,t){function l(e){try{s(o.next(e))}catch(e){t(e)}}function i(e){try{s(o.throw(e))}catch(e){t(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(l,i)}s((o=o.apply(n,r||[])).next())}));var n,r,a,o},pa=function(){return pa=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},pa.apply(this,arguments)},ma=function(t){var n=t.tag,r=t.setPopout,a=t.saveInitialState,o=function(){r(null)};return(0,e.jsx)(dr,pa({onClick:function(){r((0,e.jsx)(Dn,{actions:[{title:aa.cancel_button,autoClose:!0,mode:"cancel"},{title:aa.delete_tag_button,autoClose:!0,mode:"destructive",action:function(){var e,t,r,o;e=void 0,t=void 0,o=function(){var e,t;return function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(l=0)),l;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=t.call(e,l)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(r){switch(r.label){case 0:return[4,fa(ia.DELETE_TAG,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({tag_id:n.id})})];case 1:return null===(e=r.sent())||((t=pa({},e)).loading=!1,a(pa({},t))),[2]}}))},new((r=void 0)||(r=Promise))((function(n,a){function l(e){try{s(o.next(e))}catch(e){a(e)}}function i(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(l,i)}s((o=o.apply(e,t||[])).next())}))}}],actionsLayout:"horizontal",onClose:o,header:aa.delete_tag_title,text:aa.delete_tag_confirm.replace("{tag_name}",n.title)}))}},{children:(0,e.jsx)(da,{})}))},ha=function(){return ha=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},ha.apply(this,arguments)},va=function(t){var n=t.tags,r=t.setPopout,a=t.saveInitialState;return(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(pr,{children:n.map((function(t){return(0,e.jsx)(xr,ha({subtitle:t.folder,after:(0,e.jsx)(ma,{saveInitialState:a,tag:t,setPopout:r})},{children:t.title}))}))})})};const ga=S("Icon28UserTagOutline","user_tag_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 28 28" id="user_tag_outline_28"><g fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"><path d="M10.15 10.85a3.85 3.85 0 1 1 7.7 0 3.85 3.85 0 0 1-7.7 0zM14 9a1.85 1.85 0 1 0 0 3.7A1.85 1.85 0 0 0 14 9z" /><path d="M8.626 3h10.747c.666 0 1.226 0 1.684.037.478.04.933.124 1.365.344a3.5 3.5 0 0 1 1.53 1.53c.22.432.305.887.344 1.366.037.457.037 1.017.037 1.683v10.18c0 .666 0 1.225-.037 1.683-.04.479-.124.934-.344 1.365a3.5 3.5 0 0 1-1.53 1.53c-.432.22-.887.305-1.365.344-.458.037-1.018.037-1.684.037h-.143c-.682 0-.88.005-1.06.043a2 2 0 0 0-.52.188c-.163.085-.32.208-.845.644l-.66.547c-.251.209-.48.399-.686.544a2.519 2.519 0 0 1-.776.392 2.5 2.5 0 0 1-1.366 0 2.518 2.518 0 0 1-.776-.392 12.456 12.456 0 0 1-.686-.544l-.66-.547c-.526-.436-.682-.559-.845-.644a2.004 2.004 0 0 0-.52-.188c-.18-.038-.378-.042-1.06-.042h-.144c-.666 0-1.225 0-1.683-.038-.479-.039-.934-.124-1.365-.344a3.5 3.5 0 0 1-1.53-1.53c-.22-.431-.305-.886-.344-1.365-.038-.458-.038-1.017-.038-1.683V7.96c0-.666 0-1.226.038-1.683.039-.48.124-.934.344-1.366a3.5 3.5 0 0 1 1.53-1.53c.431-.22.886-.304 1.365-.344C7.401 3 7.96 3 8.626 3zm-1.52 2.03c-.355.03-.518.081-.62.133a1.5 1.5 0 0 0-.656.656c-.052.103-.104.265-.133.62-.03.367-.03.844-.03 1.561v10.1c0 .716 0 1.193.03 1.56.03.355.08.517.133.62a1.5 1.5 0 0 0 .656.656c.029.015.062.03.104.044a8.002 8.002 0 0 1 14.82 0 .783.783 0 0 0 .104-.044 1.5 1.5 0 0 0 .656-.656c.052-.103.103-.265.132-.62.03-.367.031-.844.031-1.56V8c0-.717 0-1.194-.03-1.56-.03-.356-.08-.518-.133-.621a1.5 1.5 0 0 0-.656-.656c-.103-.052-.265-.103-.62-.132C20.527 5 20.05 5 19.334 5H8.666c-.717 0-1.194 0-1.561.03zM19.254 21.1A6 6 0 0 0 14 18a6 6 0 0 0-5.254 3.1h.112c.555 0 .975-.001 1.385.085.361.076.71.202 1.038.375.37.195.694.463 1.121.817l.705.584c.284.235.455.376.592.473.063.045.104.07.13.083.023.012.033.015.034.016a.5.5 0 0 0 .274 0 .187.187 0 0 0 .035-.016c.026-.013.066-.038.13-.083.136-.097.307-.238.591-.473l.705-.584c.427-.354.75-.622 1.12-.817a3.998 3.998 0 0 1 1.039-.375c.41-.086.83-.086 1.385-.086z" /></g></symbol>',28,28,!1,void 0),ya=S("Icon28TagOutline","tag_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 28 28" id="tag_outline_28"><path d="M10 12a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" /><path fill-rule="evenodd" d="M5.821 17.861c-1.04-1.04-1.562-1.561-1.934-2.168a6.02 6.02 0 0 1-.72-1.74C3 13.26 3 12.523 3 11.05v-.828c0-2.529 0-3.793.492-4.758a4.514 4.514 0 0 1 1.973-1.973C6.43 3 7.695 3 10.223 3h.826c1.473 0 2.209 0 2.902.166a6.044 6.044 0 0 1 1.74.721c.607.372 1.128.893 2.169 1.934l3.543 3.545c1.987 1.986 2.98 2.98 3.352 4.125a5.015 5.015 0 0 1 0 3.1c-.373 1.145-1.366 2.138-3.353 4.124l-.689.689c-1.986 1.986-2.98 2.979-4.124 3.35a5.017 5.017 0 0 1-3.1 0c-1.145-.372-2.138-1.364-4.125-3.35L5.821 17.86ZM16.445 7.235l3.544 3.545c1.017 1.016 1.693 1.695 2.17 2.258.463.545.622.849.694 1.07a3.016 3.016 0 0 1 0 1.864c-.073.222-.231.526-.694 1.07-.478.564-1.154 1.242-2.17 2.258l-.69.69c-1.016 1.016-1.695 1.692-2.258 2.17-.545.462-.849.62-1.07.692a3.016 3.016 0 0 1-1.864 0c-.222-.072-.526-.23-1.07-.692-.564-.478-1.242-1.154-2.259-2.17l-3.543-3.543c-1.108-1.108-1.423-1.441-1.643-1.8a4.018 4.018 0 0 1-.48-1.161c-.1-.41-.112-.867-.112-2.435v-.828c0-1.297.002-2.15.055-2.802.051-.63.14-.894.219-1.048a2.514 2.514 0 0 1 1.099-1.099c.154-.078.419-.168 1.048-.22C8.073 5.003 8.926 5 10.223 5h.826c1.568 0 2.026.013 2.435.111.41.099.802.261 1.162.481.358.22.691.535 1.8 1.643Z" clip-rule="evenodd" /></symbol>',28,28,!1,void 0);var ba=function(){return ba=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},ba.apply(this,arguments)},wa=function(t){var n=t.activeStory,r=t.onStoryChange,a=t.photosListCounter,o=a>0?(0,e.jsx)(Rr,ba({size:"s",mode:"prominent"},{children:a})):(0,e.jsx)(e.Fragment,{});return(0,e.jsxs)(Sn,ba({mode:"horizontal"},{children:[(0,e.jsx)(_n,ba({indicator:o,onClick:r,selected:n===oa.PHOTOS,"data-story":oa.PHOTOS,text:aa.photos_list_title},{children:(0,e.jsx)(ga,{})})),(0,e.jsx)(_n,ba({onClick:r,selected:n===oa.TAGS,"data-story":oa.TAGS,text:aa.tags_list_title},{children:(0,e.jsx)(ya,{})}))]}))};const Ea=S("Icon24Dismiss","dismiss_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="dismiss_24"><g fill="currentColor"><path d="M12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12s5.373 12 12 12z" opacity=".12" /><path d="M16.736 7.264a.9.9 0 0 1 0 1.272L13.273 12l3.463 3.464a.9.9 0 0 1 .081 1.18l-.08.092a.9.9 0 0 1-1.273 0L12 13.273l-3.464 3.463a.9.9 0 1 1-1.272-1.272L10.727 12 7.264 8.536a.9.9 0 0 1-.08-1.18l.08-.092a.9.9 0 0 1 1.272 0L12 10.727l3.464-3.463a.9.9 0 0 1 1.272 0z" /></g></symbol>',24,24,!1,void 0),ka=S("Icon28FolderSimplePlusOutline","folder_simple_plus_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 28 28" id="folder_simple_plus_outline_28"><path fill-rule="evenodd" d="M8.675 5c.536 0 .642.006.73.028a1 1 0 0 1 .29.12c.077.047.156.117.535.496l1.126 1.126.059.059c.287.288.54.542.846.729a3 3 0 0 0 .867.36c.348.083.707.082 1.114.082H19.4c.997 0 1.684 0 2.217.044.522.043.808.122 1.018.228a2.5 2.5 0 0 1 1.092 1.093c.086.168.179.593.227 1.375.046.735.046 1.625.046 2.614a1 1 0 1 0 2 0v-.023c0-.962 0-1.911-.05-2.714-.047-.763-.145-1.58-.44-2.16a4.5 4.5 0 0 0-1.967-1.967c-.539-.274-1.117-.386-1.763-.439C21.156 6 20.386 6 19.442 6h-5.117c-.536 0-.642-.006-.73-.028a1 1 0 0 1-.29-.12c-.076-.047-.156-.117-.535-.496L11.644 4.23l-.059-.059c-.287-.288-.54-.542-.846-.729a3 3 0 0 0-.867-.36C9.523 3 9.165 3 8.758 3h-.2c-.944 0-1.714 0-2.338.051-.646.053-1.224.165-1.763.44A4.5 4.5 0 0 0 2.49 5.456c-.274.539-.386 1.117-.439 1.763C2 7.844 2 8.614 2 9.558v7.884c0 .944 0 1.714.051 2.338.053.646.165 1.224.44 1.763a4.5 4.5 0 0 0 1.966 1.966c.539.275 1.117.387 1.763.44C6.844 24 7.614 24 8.558 24h6.818a1 1 0 1 0 0-2H8.6c-.997 0-1.684 0-2.217-.044-.522-.043-.808-.122-1.018-.229a2.5 2.5 0 0 1-1.093-1.092c-.106-.21-.185-.496-.228-1.018C4.001 19.084 4 18.397 4 17.4V9.6c0-.997 0-1.684.044-2.217.043-.522.122-.808.228-1.018a2.5 2.5 0 0 1 1.093-1.093c.21-.106.496-.185 1.018-.228C6.916 5.001 7.603 5 8.6 5h.075Zm14.318 10.883A1 1 0 0 0 21 16v3h-3l-.117.007A1 1 0 0 0 17 20l.007.117A1 1 0 0 0 18 21h3v3l.007.117A1 1 0 0 0 23 24v-3h3l.117-.007A1 1 0 0 0 27 20l-.007-.117A1 1 0 0 0 26 19h-3v-3l-.007-.117Z" clip-rule="evenodd" /></symbol>',28,28,!1,void 0);var Sa=function(){return Sa=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Sa.apply(this,arguments)},Ca=function(t){var n=t.tag,r=t.saveTag,a=t.onChangeTag;return(0,e.jsxs)(Dr,{children:[(0,e.jsx)(Kr,Sa({top:aa.tag_label_title},{children:(0,e.jsx)(Qr,{name:"title",onChange:a,value:n.title,placeholder:aa.tag_placeholder_title})})),(0,e.jsx)(Kr,Sa({top:aa.tag_label_folder},{children:(0,e.jsx)(Qr,{name:"folder",onChange:a,value:n.folder,placeholder:aa.tag_placeholder_folder})})),(0,e.jsx)(Kr,{children:(0,e.jsx)(st,Sa({onClick:r},{children:aa.save_tag_button}))})]})},_a=function(){return _a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},_a.apply(this,arguments)},xa=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function l(e){try{s(r.next(e))}catch(e){o(e)}}function i(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}s((r=r.apply(e,t||[])).next())}))},Ta=function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(l=0)),l;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,r=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=t.call(e,l)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Pa=function(){return Pa=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Pa.apply(this,arguments)};t.render((0,e.jsx)((e=>{const t=J(),{children:r,webviewType:a,isWebView:o,transitionMotionEnabled:l,platform:i,locale:s,appearance:u,onDetectAppearanceByBridge:c=_}={...t,...e},d=((e,t)=>{const{window:r}=le(),a=n.useRef((()=>{t&&t(),a.current=_})),[o,l]=n.useState((()=>{if(e)return e;if(ra)return a.current(),ra;const t=r&&r.matchMedia&&r.matchMedia("(prefers-color-scheme: dark)");return t?.matches?"dark":"light"}));return n.useEffect((()=>e?(l(e),_):F().isEmbedded()?function(e,t){function n(n){const{type:r,data:a}=n.detail;"VKWebAppUpdateConfig"===r&&(ra=na(a),ra&&(t(),e(ra)))}return F().subscribe(n),()=>F().unsubscribe(n)}(l,a.current):function(e,t){const n=e&&e.matchMedia&&e.matchMedia("(prefers-color-scheme: dark)");if(void 0===n)return _;const r=e=>{t(e.matches?"dark":"light")};return r(n),nn(n,r),()=>rn(n,r)}(r,l)),[r,e]),o})(u,c),{document:f}=le();$((()=>{const e=un(i,d);return f.body.classList.add(e),()=>{f.body.classList.remove(e)}}),[i,d]);const p=gt({webviewType:a,isWebView:o,transitionMotionEnabled:l,platform:i,locale:s,appearance:d});return n.createElement(Q.Provider,{value:p},n.createElement(cn,{platform:i,appearance:d},r))}),Pa({platform:K.IOS,appearance:"light"},{children:(0,e.jsx)((({viewWidth:e,viewHeight:t,sizeX:r,sizeY:a,hasPointer:o,hasHover:l,children:i})=>{const s=function(){const[e,t]=n.useState(Zr);return $((()=>{function e(e){const n=$r(e);n&&t(n)}return F().subscribe(e),()=>{F().unsubscribe(e)}}),[]),e}(),u=n.useMemo((()=>function({viewWidth:e,viewHeight:t,sizeX:n,sizeY:r,hasPointer:a,hasHover:o},l){if("adaptive"===l.type){const{viewportWidth:a,viewportHeight:o}=l;e=a>=an.BREAKPOINTS.DESKTOP?ce.DESKTOP:a>=an.BREAKPOINTS.TABLET?ce.TABLET:a>=an.BREAKPOINTS.SMALL_TABLET?ce.SMALL_TABLET:a>=an.BREAKPOINTS.MOBILE?ce.MOBILE:ce.SMALL_MOBILE,t=o>=an.BREAKPOINTS.MEDIUM_HEIGHT?de.MEDIUM:o>=an.BREAKPOINTS.MOBILE_LANDSCAPE_HEIGHT?de.SMALL:de.EXTRA_SMALL,n=e<=ce.MOBILE?fe.COMPACT:fe.REGULAR,r=e>=ce.SMALL_TABLET&&z||t<=de.EXTRA_SMALL?fe.COMPACT:fe.REGULAR}else"force_mobile"===l.type||"force_mobile_compact"===l.type?(e=ce.MOBILE,n=fe.COMPACT,r="force_mobile_compact"===l.type?fe.COMPACT:fe.REGULAR):(void 0===n&&void 0!==e&&(n=e<=ce.MOBILE?fe.COMPACT:fe.REGULAR),void 0===r&&void 0!==e&&void 0!==t&&(r=e>=ce.SMALL_TABLET&&z||t<=de.EXTRA_SMALL?fe.COMPACT:fe.REGULAR));return{viewWidth:e,viewHeight:t,sizeX:n,sizeY:r,hasPointer:a,hasHover:o}}({viewWidth:e,viewHeight:t,sizeX:r,sizeY:a,hasPointer:o,hasHover:l},s)),[e,t,r,a,o,l,s]);return n.createElement(V.Provider,{value:u},i)}),{children:(0,e.jsx)((function(){var t={title:"",folder:"",id:0},r=n.useState(oa.PHOTOS),a=r[0],o=r[1],l=n.useState(null),i=l[0],s=l[1],u=n.useState(t),c=u[0],d=u[1],f=n.useState({photos:[],tags:[],loading:!0}),p=f[0],m=f[1],h=n.useState(null),v=h[0],g=h[1],y=(0,e.jsx)(er,_a({activeModal:i},{children:(0,e.jsx)(ir,_a({header:(0,e.jsx)(sr,{after:(0,e.jsx)(Rt,_a({onClick:function(){s(null)}},{children:(0,e.jsx)(Ea,{})}))}),hideCloseButton:!0,id:la.TAG_CREATE},{children:(0,e.jsx)(Ca,{onChangeTag:function(e){var t=e.target,n=t.name,r=t.value;"title"===n&&(c.title=r),"folder"===n&&(c.folder=r),d(_a({},c))},saveTag:function(){return xa(void 0,void 0,void 0,(function(){var e,n;return Ta(this,(function(r){switch(r.label){case 0:return p.loading=!0,m(_a({},p)),[4,fa(ia.ADD_TAG,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)})];case 1:return null===(e=r.sent())?(p.loading=!1,m(_a({},p)),[2]):((n=_a({},e)).loading=!1,m(_a({},n)),d(t),s(null),[2])}}))}))},tag:c})}))}));return(0,n.useEffect)((function(){!function(){xa(this,void 0,void 0,(function(){var e,t;return Ta(this,(function(n){switch(n.label){case 0:return[4,fa(ia.GET_INITIAL_STATE)];case 1:return null===(e=n.sent())||((t=_a({},e)).loading=!1,m(_a({},t))),[2]}}))}))}()}),[]),p.loading?(0,e.jsx)(_e,{children:(0,e.jsx)(Oe,{})}):(0,e.jsx)(_e,{children:(0,e.jsx)(gn,_a({popout:v,modal:y,header:(0,e.jsx)(en,{separator:!1}),style:{justifyContent:"center"}},{children:(0,e.jsx)(bn,_a({width:"100%",maxWidth:"560px",stretchedOnMobile:!0,autoSpaced:!0},{children:(0,e.jsxs)(En,_a({activeStory:a,tabbar:(0,e.jsx)(wa,{onStoryChange:function(e){return o(e.currentTarget.dataset.story)},photosListCounter:p.photos?p.photos.length:0,activeStory:a})},{children:[(0,e.jsx)(Ct,_a({id:oa.PHOTOS,activePanel:oa.PHOTOS},{children:(0,e.jsxs)(Tt,_a({id:oa.PHOTOS},{children:[(0,e.jsx)(en,{children:aa.photos_list_title}),(0,e.jsx)(ca,{photos:p.photos||[]})]}))})),(0,e.jsx)(Ct,_a({id:oa.TAGS,activePanel:oa.TAGS},{children:(0,e.jsxs)(Tt,_a({id:oa.TAGS},{children:[(0,e.jsx)(en,_a({before:(0,e.jsx)(Jr,_a({onClick:function(){var e;e=t,s(la.TAG_CREATE),d(e)}},{children:(0,e.jsx)(dr,{children:(0,e.jsx)(ka,{})})}))},{children:aa.tags_list_title})),(0,e.jsx)(va,{saveInitialState:m,setPopout:g,tags:p.tags})]}))}))]}))}))}))})}),{})})})),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,